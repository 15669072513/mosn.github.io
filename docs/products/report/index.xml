<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MOSN – 发布报告</title>
    <link>https://mosn.io/docs/products/report/</link>
    <description>Recent content in 发布报告 on MOSN</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://mosn.io/docs/products/report/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 版本发布</title>
      <link>https://mosn.io/docs/products/report/releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 版本发布介绍</title>
      <link>https://mosn.io/docs/products/report/release-products/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/release-products/</guid>
      <description>
        
        
        &lt;h2 id=&#34;mosn-版本发布步骤&#34;&gt;MOSN 版本发布步骤&lt;/h2&gt;
&lt;h3 id=&#34;一冻结代码&#34;&gt;一、冻结代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在准备一个版本发布期间，停止代码往 master 分支的合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二更新依赖&#34;&gt;二、更新依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发布 mosn/api，版本与即将发布的 mosn 相同&lt;/li&gt;
&lt;li&gt;更新 mosn/pkg 的 mosn/api 版本至最新，然后发布 mosn/pkg&lt;/li&gt;
&lt;li&gt;更新 mosn 的 api、pkg 至最新&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三整理-release-notes&#34;&gt;三、整理 Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于 Github 的 PullRequest 记录，整理本次发布的内容与上一个版本之间的差异，需要注意仅统计目标分支是 master 且正常合并的 PullRequest&lt;/li&gt;
&lt;li&gt;首先整理完原始信息以后，进行提炼和总结
&lt;ul&gt;
&lt;li&gt;通常情况下，一个 PullRequest 对应一个改动记录&lt;/li&gt;
&lt;li&gt;存在部分特殊情况是一个 PullRequest 包含多个改动的情况，可以请 PullRequest 提供者提供详细信息&lt;/li&gt;
&lt;li&gt;也可能存在多个 PullRequest 是针对同一个改动的情况（如新功能，分开提 PullRequest，或者在同一个版本迭代中不断优化）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提炼后的完整 Release notes 记录格式可以参考 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/CHANGELOG_ZH.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提炼后的 Release notes 需要有英文版本的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四测试报告&#34;&gt;四、测试报告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有的改动点都需要有对应的测试记录，测试方式可以有多种，包括但不限于
&lt;ul&gt;
&lt;li&gt;完整的单元测试覆盖，确保基本的功能场景正确，默认代码合并的时候会执行&lt;/li&gt;
&lt;li&gt;性能测试 Benchmark，针对可能对性能有影响的改动，需要执行性能测试。&lt;/li&gt;
&lt;li&gt;手动模拟测试，主要针对一些单元测试无法很好覆盖的场景（如涉及网络 IO、Proxy 转发等多模块交互），通过手动搭建测试环境（配置、模拟 Server 与 Client）进行场景复现与验证
&lt;ul&gt;
&lt;li&gt;手动模拟测试完成以后记录详细的测试步骤，包括：模拟的场景、使用的配置、使用的 Server、使用的 Client 等；后续可以考虑将手动场景实现为 integrate 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试完成以后，产出测试报告，说明对应的功能点使用哪种测试方式测试与测试的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五版本发布&#34;&gt;五、版本发布&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本发布 PullRequest&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改&lt;code&gt;VERSION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;CHANGELOG.md&lt;/code&gt;、&lt;code&gt;CHNAGELOH_ZH.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传测试报告&lt;code&gt;reports/${VERSION}.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官网文档的同步修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github.com/mosn/mosn.io/content/zh/blog/releases 下新增对应的 release notes.&lt;/li&gt;
&lt;li&gt;英文版 release notes 也需要做一样的更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正式 release&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并完&lt;code&gt;版本发布 PullRequest&lt;/code&gt;后，基于 master 分支完成 release&lt;/li&gt;
&lt;li&gt;release 时的描述内容填写英文版 release notes 的内容&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;make build&lt;/code&gt;命令编译出对应的二进制并且上传&lt;/li&gt;
&lt;li&gt;完成 release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
