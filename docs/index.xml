<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MOSN – MOSN 文档</title>
    <link>https://mosn.io/docs/</link>
    <description>Recent content in MOSN 文档 on MOSN</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://mosn.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: ListenerFilter</title>
      <link>https://mosn.io/docs/products/configuration-overview/server/listener/listener-filter/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/server/listener/listener-filter/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 MOSN 的 ListenerFilter 配置。&lt;/p&gt;
&lt;p&gt;ListenerFilter 主要用于 listener 透明代理配置。&lt;/p&gt;
&lt;p&gt;目前 MOSN 一个 Listener 只支持一个 ListenerFilter。&lt;/p&gt;
&lt;p&gt;ListenerFilter 的配置结构如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fallback_to_local&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;透明代理类型，当前版本下此处 type 需要与 listener 中的 use_original_dst 配置一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fallback_to_local&#34;&gt;fallback_to_local&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bool 类型，用于标记匹配本地监听的 ip 地址，&lt;code&gt;true&lt;/code&gt; 使用 127.0.0.1，&lt;code&gt;false&lt;/code&gt; 使用 0.0.0.0，当所有 listener 的 ip 都不匹配代理到的请求时将尝试使用监听本地 ip 的 listener 处理。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 快速开始</title>
      <link>https://mosn.io/docs/user-guide/start/proxy/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/user-guide/start/proxy/</guid>
      <description>
        
        
        &lt;p&gt;本文用于帮助初次接触 MOSN 项目的开发人员，快速搭建开发环境，完成编译，测试，镜像制作和示例配置的运行。&lt;/p&gt;
&lt;h2 id=&#34;准备运行环境&#34;&gt;准备运行环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果您使用容器运行 MOSN，请先 &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;安装 docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果您使用本地机器，请使用类 Unix 环境&lt;/li&gt;
&lt;li&gt;安装 Go 的编译环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取代码&#34;&gt;获取代码&lt;/h2&gt;
&lt;p&gt;MOSN 项目的代码托管在 &lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;Github&lt;/a&gt;，获取方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone git@github.com:mosn/mosn.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终 MOSN 的源代码代码路径为 &lt;code&gt;$GOPATH/src/mosn.io/mosn&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;导入-ide&#34;&gt;导入 IDE&lt;/h2&gt;
&lt;p&gt;使用您喜爱的 Go IDE 导入 mosn 项目，推荐 Goland。&lt;/p&gt;
&lt;h2 id=&#34;编译代码&#34;&gt;编译代码&lt;/h2&gt;
&lt;p&gt;在项目根目录下，根据自己机器的类型以及欲执行二进制的环境，选择以下命令编译 MOSN 的二进制文件。&lt;/p&gt;
&lt;h3 id=&#34;切换-istio-支持版本&#34;&gt;切换 Istio 支持版本&lt;/h3&gt;
&lt;p&gt;MOSN 目前支持xDS v2 与 xDS v3，分别以Istio 1.5.2 和 Istio 1.10.6 为代表，可以根据需求在不同的版本支持之间切换。默认使用的是1.10.6版本。&lt;/p&gt;
&lt;p&gt;切换到1.5.2 版本（xDS v2）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make istio-1.5.2 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;切换到1.10.6版本(xDS v3)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make istio-1.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-docker-镜像编译&#34;&gt;使用 docker 镜像编译&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build // 编译出 linux 64bit 可运行二进制文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;本地编译&#34;&gt;本地编译&lt;/h3&gt;
&lt;p&gt;使用下面的命令编译本地可运行二进制文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后可以在 &lt;code&gt;build/bundles/${version}/binary&lt;/code&gt; 目录下找到编译好的二进制文件。&lt;/p&gt;
&lt;h2 id=&#34;运行测试&#34;&gt;运行测试&lt;/h2&gt;
&lt;p&gt;支持两种环境来运行测试，如果有 docker 环境的，推荐使用 docker 环境，环境更干净可控。
MOSN 项目集成的 CI 是使用的 docker 环境来运行的。&lt;/p&gt;
&lt;h3 id=&#34;使用-docker-环境运行测试&#34;&gt;使用 docker 环境运行测试&lt;/h3&gt;
&lt;p&gt;在项目根目录下执行如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 单元测试&lt;/span&gt;
make unit-test
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 集成测试（较慢）&lt;/span&gt;
make integrate
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 新版集成测试（较慢）&lt;/span&gt;
make integrate-new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用本地环境运行测试&#34;&gt;使用本地环境运行测试&lt;/h3&gt;
&lt;p&gt;在项目根目录下执行如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 单元测试&lt;/span&gt;
make ut-local
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 集成测试（较慢）&lt;/span&gt;
make integrate-local
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 新版集成测试（较慢）&lt;/span&gt;
make integrate-framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行-mosn&#34;&gt;运行 MOSN&lt;/h2&gt;
&lt;p&gt;运行下面的命令，将使用一个 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/configs/mosn_config.json&#34;&gt;示例配置文件&lt;/a&gt; 启动 MOSN。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./build/bundles/&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/binary/mosn start -c configs/mosn_config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mosn-配置说明&#34;&gt;MOSN 配置说明&lt;/h3&gt;
&lt;p&gt;这个示例，我们模拟了经典的 service mesh 中，MOSN 作为 sidecar 的场景。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      POD A                      POD B
------------------        -------------------
| App A =&amp;gt; MOSN A |  ==&amp;gt;  | MOSN B =&amp;gt; App B |
-------------------       -------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建议打开 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/configs/mosn_config.json&#34;&gt;示例配置文件&lt;/a&gt; ，阅读如下配置说明。&lt;/p&gt;
&lt;h3 id=&#34;应用服务&#34;&gt;应用服务&lt;/h3&gt;
&lt;p&gt;其中，&lt;code&gt;appListener&lt;/code&gt; 这个 listener 监听了 &lt;code&gt;2047&lt;/code&gt; 端口，使用 &lt;code&gt;application&lt;/code&gt; 这个 router，
router 内配置了 &lt;code&gt;direct_response&lt;/code&gt;，输出静态配置内容。
在这个示例里，模拟一个应用服务，&lt;code&gt;App B&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以使用如下命令测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;http://localhost:2047/&amp;#39;&lt;/span&gt;
Welcome to MOSN!
The Cloud-Native Network Proxy Platform.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;流量代理转发&#34;&gt;流量代理转发&lt;/h3&gt;
&lt;p&gt;其中，&lt;code&gt;serverListener&lt;/code&gt; 这个 listener 监听了 &lt;code&gt;2046&lt;/code&gt; 端口，使用 &lt;code&gt;server_router&lt;/code&gt; 这个 router，
router 内配置启用了 &lt;code&gt;proxy&lt;/code&gt; 这个 filter，转发到 &lt;code&gt;serverCluster&lt;/code&gt; 这个 cluster。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;cluster_manager&lt;/code&gt; 中可以看到 &lt;code&gt;serverCluster&lt;/code&gt; 的具体配置：&lt;code&gt;127.0.0.1:2047&lt;/code&gt;，也就是上面的 &lt;code&gt;App B&lt;/code&gt;。
&lt;code&gt;serverListener&lt;/code&gt; 在示例里模拟了 &lt;code&gt;MOSN B&lt;/code&gt;，代理了 &lt;code&gt;App B&lt;/code&gt; 的入口流量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clientListener&lt;/code&gt; 和 &lt;code&gt;serverListener&lt;/code&gt; 类似，由 &lt;code&gt;2045&lt;/code&gt; 端口转发到 &lt;code&gt;2046&lt;/code&gt;。
模拟了 &lt;code&gt;MOSN A&lt;/code&gt;，代理了 &lt;code&gt;App A&lt;/code&gt; 的入口流量。&lt;/p&gt;
&lt;p&gt;剩下 &lt;code&gt;App A&lt;/code&gt;，我们可以通过 &lt;code&gt;curl&lt;/code&gt; 来模拟：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;http://localhost:2045/&amp;#39;&lt;/span&gt;
Welcome to MOSN!
The Cloud-Native Network Proxy Platform.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上就构建了 MOSN 作为 sidecar 的典型使用示例。
其他更多场景的用法，请参考 &lt;a href=&#34;../../configuration/&#34;&gt;配置概览&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;创建镜像&#34;&gt;创建镜像&lt;/h2&gt;
&lt;p&gt;执行如下命令创建 docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;更多-mosn-示例程序&#34;&gt;更多 MOSN 示例程序&lt;/h2&gt;
&lt;p&gt;参考 &lt;code&gt;examples&lt;/code&gt; 目录下的示例工程&lt;a href=&#34;../../samples&#34;&gt;运行 Samples&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-mosn-搭建-service-mesh-平台&#34;&gt;使用 MOSN 搭建 Service Mesh 平台&lt;/h2&gt;
&lt;p&gt;请参考&lt;a href=&#34;../istio&#34;&gt;与 Istio 集成&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 贡献指引</title>
      <link>https://mosn.io/docs/open-source/contributing-source-code/contribute/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/open-source/contributing-source-code/contribute/</guid>
      <description>
        
        
        &lt;h2 id=&#34;mosn-贡献指引&#34;&gt;MOSN 贡献指引&lt;/h2&gt;
&lt;p&gt;首先很感谢您有兴趣给 MOSN 提交 PR。
为了能更高效的推进 PR 的合并，我们有一些推荐的做法，希望能有所帮助。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建分支
推荐使用新分支来开发，master 分支推荐保持跟 MOSN 上游主分支保持一致&lt;/li&gt;
&lt;li&gt;PR 需要说明意图
如果已经有对应讨论的 issue，可以引用 issue
如果没有 issue，需要描述清楚 PR 的意图，比如 bug 的情况。
如果改动比较大，最好可以比较详细的改动说明介绍。&lt;/li&gt;
&lt;li&gt;提交新的 commit 来处理 review 意见
当 PR 收到 review 意见后，有新的改动，推荐放到新的 commit，不要追加到原来的 commit，这样方便 reviewer 查看新的变更&lt;/li&gt;
&lt;li&gt;尽量提交小 PR
不相关的改动，尽量放到不同的 PR，这样方便快速 review 合并&lt;/li&gt;
&lt;li&gt;尽量减少 force push
因为 force push 之后，review 意见就对不上原始的代码记录了，这样不利于其他人了解 review 的过程。除非是因为需要 rebase 处理跟 master 的冲突，这种 rebase 后就只能 force push 了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，很重要的一点，写清楚 commit log。&lt;/p&gt;
&lt;p&gt;首先 commit log 推荐以一个单词开头，这样方便快速知晓 commit 的类型，比如下面的这些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;feature: 实现了一个新的功能/特性&lt;/li&gt;
&lt;li&gt;change: 没有向后兼容的变更&lt;/li&gt;
&lt;li&gt;refactor: 代码重构&lt;/li&gt;
&lt;li&gt;bugfix: bug 修复&lt;/li&gt;
&lt;li&gt;optimize: 性能优化相关的变更&lt;/li&gt;
&lt;li&gt;doc: 文档变更，包括注释&lt;/li&gt;
&lt;li&gt;tests: 测试用例相关的变更&lt;/li&gt;
&lt;li&gt;style: 代码风格相关的调整&lt;/li&gt;
&lt;li&gt;sample: 示例相关的变更&lt;/li&gt;
&lt;li&gt;chore: 其他不涉及核心逻辑的小改动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开头单词之后，是简要介绍一下改动的内容，比如新增了什么功能，如果是 bugfix 的话，还需要说明 bug 复现的条件，以及危害。
比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bugfix: got the wrong CACert filename when converting the listen filter from istio LDS, mosn may not listen success then.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果比较复杂，一句话写不清楚的话，也可以写多行，commit log 不用怕太长。&lt;/p&gt;
&lt;p&gt;如果英文不容易写清楚，在 PR comment 里用中文描述清楚也可以的。&lt;/p&gt;
&lt;p&gt;最后，祝玩得开心。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SkyWalking 配置</title>
      <link>https://mosn.io/docs/products/configuration-overview/trace/skywalking/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/trace/skywalking/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 SkyWalking Trace  配置。&lt;/p&gt;
&lt;p&gt;目前支持 &lt;code&gt;HTTP1&lt;/code&gt; 协议追踪。&lt;/p&gt;
&lt;p&gt;SkyWalking 描述的 MOSN 的基本全局参数如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tracing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;enable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;SkyWalking&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;reporter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;gRPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;backend_service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;127.0.0.1:11800&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;max_send_queue_size&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;authentication&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cert_file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cert.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_name_override&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn.io&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reporter&#34;&gt;reporter&lt;/h2&gt;
&lt;p&gt;trace 数据上报模式， 支持 &lt;code&gt;log&lt;/code&gt;（仅用于测试） 和 &lt;code&gt;gRPC&lt;/code&gt; 两种模式 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;log&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;backend_service&#34;&gt;backend_service&lt;/h2&gt;
&lt;p&gt;SkyWalking 后端服务地址，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：&lt;code&gt;127.0.0.1:11800&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service_name&#34;&gt;service_name&lt;/h2&gt;
&lt;p&gt;注册到 SkyWalking 的服务名称，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;mosn&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;max_send_queue_size&#34;&gt;max_send_queue_size&lt;/h2&gt;
&lt;p&gt;trace 数据缓冲队列大小，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;30000&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authentication&#34;&gt;authentication&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gRPC&lt;/code&gt; 身份认证参数，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置不为空，在与 SkyWalking 后端服务建立连接时会使用此参数进行身份认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tls&#34;&gt;tls&lt;/h2&gt;
&lt;p&gt;仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置不为空，将使用 TLS 连接 SkyWalking 后端服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cert_file&#34;&gt;cert_file&lt;/h3&gt;
&lt;p&gt;TLS 客户端证书。&lt;/p&gt;
&lt;h3 id=&#34;server_name_override&#34;&gt;server_name_override&lt;/h3&gt;
&lt;p&gt;服务名称。&lt;/p&gt;
&lt;h3 id=&#34;配置示例&#34;&gt;配置示例&lt;/h3&gt;
&lt;p&gt;更多细节可以参考&lt;a href=&#34;https://mosn.io/blog/posts/skywalking-support/&#34;&gt;《MOSN 支持使用 SkyWalking 进行分布式追踪》&lt;/a&gt; 。这篇文档提供了配置示例和演示视频。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FilterChain</title>
      <link>https://mosn.io/docs/products/configuration-overview/server/listener/filter-chain/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/server/listener/filter-chain/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 MOSN 的 FilterChain 配置。&lt;/p&gt;
&lt;p&gt;FilterChain 是 MOSN Listener 配置中核心逻辑配置，不同的 FilterChain 配置描述了 Listener 会如何处理请求。&lt;/p&gt;
&lt;p&gt;目前 MOSN 一个 Listener 只支持一个 FilterChain。&lt;/p&gt;
&lt;p&gt;FilterChain 的配置结构如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context_set&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tls_context_set&#34;&gt;tls_context_set&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一组 &lt;code&gt;tls_context&lt;/code&gt; 配置，MOSN 默认使用 &lt;code&gt;tls_context_set&lt;/code&gt; 来描述 listener 的 TLS 的证书信息。&lt;/li&gt;
&lt;li&gt;一个 listener 可同时支持配置多张 TLS 证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls_context&#34;&gt;tls_context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单独配置 &lt;code&gt;tls_context&lt;/code&gt; 而不是使用 &lt;code&gt;tls_context_set&lt;/code&gt; 是兼容 MOSN 历史配置（只支持一张证书配置时）的场景，这种配置方式后面会逐步废弃。&lt;/li&gt;
&lt;li&gt;tls_context 的详细配置说明，参考 &lt;a href=&#34;../../custom#tls-context&#34;&gt;tls_context&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;filters&#34;&gt;filters&lt;/h3&gt;
&lt;p&gt;一组 network filter 配置。&lt;/p&gt;
&lt;h3 id=&#34;network-filter&#34;&gt;network filter&lt;/h3&gt;
&lt;p&gt;network filter 描述了 MOSN 在连接建立以后如何在 4 层处理连接数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;type 是一个字符串，描述了 filter 的类型。&lt;/li&gt;
&lt;li&gt;config 可以是任意 json 配置，描述不同 filter 的配置。&lt;/li&gt;
&lt;li&gt;network filter 可自定义扩展实现，默认支持的 type 包括 &lt;code&gt;proxy&lt;/code&gt;、&lt;code&gt;tcp proxy&lt;/code&gt;、&lt;code&gt;connection_manager&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_manager&lt;/code&gt; 是一个特殊的 network filter，它需要和 &lt;code&gt;proxy&lt;/code&gt; 一起使用，用于描述 &lt;code&gt;proxy&lt;/code&gt; 中路由相关的配置，是一个兼容性质的配置，后续可能有修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: proxy</title>
      <link>https://mosn.io/docs/products/configuration-overview/server/listener/network-filter/proxy/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/server/listener/network-filter/proxy/</guid>
      <description>
        
        
        &lt;p&gt;proxy 是 MOSN 最常用的 network filter，其配置格式如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;downstream_protocol&lt;/code&gt; 描述 proxy 期望收到的请求协议，在连接收到数据时，会使用此协议去解析数据包并完成转发，如果收到的数据包协议和配置不符，MOSN 会将连接断开。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upstream_protocol&lt;/code&gt; 描述 proxy 将以何种协议转发数据，通常情况下应该和&lt;code&gt;downstream_protocol&lt;/code&gt; 保持一致，只有特殊的场景会进行对应协议的转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;router_config_name&lt;/code&gt; 描述 proxy 的路由配置的索引，通常情况下，这个配置会和同 listener 下的 &lt;code&gt;connection_manager&lt;/code&gt; 中配置的 &lt;code&gt;router_config_name&lt;/code&gt; 保持一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend_config&lt;/code&gt; 扩展配置，目前仅在 MOSN 的 &lt;code&gt;XProtocol&lt;/code&gt; 协议中使用。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: </title>
      <link>https://mosn.io/docs/user-guide/start/istio/istio-diff/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/user-guide/start/istio/istio-diff/</guid>
      <description>
        
        
        &lt;p&gt;bin/init.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-WASM_RELEASE_DIR=${ISTIO_ENVOY_LINUX_RELEASE_DIR}
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-for plugin in stats metadata_exchange
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-do
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-  FILTER_WASM_URL=&amp;#34;${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.wasm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-  download_wasm_if_necessary &amp;#34;${FILTER_WASM_URL}&amp;#34; &amp;#34;${WASM_RELEASE_DIR}&amp;#34;/&amp;#34;${plugin//_/-}&amp;#34;-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-  FILTER_WASM_URL=&amp;#34;${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.compiled.wasm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-  download_wasm_if_necessary &amp;#34;${FILTER_WASM_URL}&amp;#34; &amp;#34;${WASM_RELEASE_DIR}&amp;#34;/&amp;#34;${plugin//_/-}&amp;#34;-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-done
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#WASM_RELEASE_DIR=${ISTIO_ENVOY_LINUX_RELEASE_DIR}
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#for plugin in stats metadata_exchange
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#do
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#  FILTER_WASM_URL=&amp;#34;${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.wasm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#  download_wasm_if_necessary &amp;#34;${FILTER_WASM_URL}&amp;#34; &amp;#34;${WASM_RELEASE_DIR}&amp;#34;/&amp;#34;${plugin//_/-}&amp;#34;-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#  FILTER_WASM_URL=&amp;#34;${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.compiled.wasm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#  download_wasm_if_necessary &amp;#34;${FILTER_WASM_URL}&amp;#34; &amp;#34;${WASM_RELEASE_DIR}&amp;#34;/&amp;#34;${plugin//_/-}&amp;#34;-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bin/update_proxy.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-WASM_URL=${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-printf &amp;#34;Verifying %s is available\n&amp;#34; &amp;#34;$WASM_URL&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-until curl --output /dev/null --silent --head --fail &amp;#34;$WASM_URL&amp;#34;; do
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-    printf &amp;#39;.&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-    sleep $SLEEP_TIME
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-done
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#WASM_URL=${ISTIO_ENVOY_BASE_URL}/${plugin}-${ISTIO_ENVOY_VERSION}.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#printf &amp;#34;Verifying %s is available\n&amp;#34; &amp;#34;$WASM_URL&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#until curl --output /dev/null --silent --head --fail &amp;#34;$WASM_URL&amp;#34;; do
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#    printf &amp;#39;.&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#    sleep $SLEEP_TIME
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pilot/docker/Dockerfile.proxyv2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-COPY stats-filter.wasm /etc/istio/extensions/stats-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-COPY stats-filter.compiled.wasm /etc/istio/extensions/stats-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-COPY metadata-exchange-filter.wasm /etc/istio/extensions/metadata-exchange-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-COPY metadata-exchange-filter.compiled.wasm /etc/istio/extensions/metadata-exchange-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#COPY stats-filter.wasm /etc/istio/extensions/stats-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#COPY stats-filter.compiled.wasm /etc/istio/extensions/stats-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#COPY metadata-exchange-filter.wasm /etc/istio/extensions/metadata-exchange-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#COPY metadata-exchange-filter.compiled.wasm /etc/istio/extensions/metadata-exchange-filter.compiled.wasm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tools/istio-docker.mk&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; # rule for wasm extensions.
&lt;span style=&#34;color:#a40000&#34;&gt;-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm: init
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;-docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+#docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pkg/config/constants/constants.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-       BinaryPathFilename = &amp;#34;/usr/local/bin/envoy&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+       BinaryPathFilename = &amp;#34;/usr/local/bin/mosn&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: ClusterManager 配置</title>
      <link>https://mosn.io/docs/products/configuration-overview/clustermanager/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/clustermanager/</guid>
      <description>
        
        
        &lt;p&gt;本文是关于 MOSN ClusterManager 配置的说明。&lt;/p&gt;
&lt;p&gt;MOSN 中通过 &lt;code&gt;cluster_manager&lt;/code&gt; 来管理转发的集群地址，通常与 &lt;a href=&#34;https://mosn.io/docs/configuration/server/router/#route&#34;&gt;Router&lt;/a&gt; 配合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;&amp;quot;cluster_manager&amp;quot;:{
  &amp;quot;tls_context&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;cluster_pool_enable&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;clusters_configs&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;clusters&amp;quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tls_context&lt;/code&gt;，可选配置，用于描述 Cluster 全局共享的 TLS 配置，该配置项需要结合 clusters 配置中的 cluster_manager_tls 配置项一起使用，TLS 详细配置见 &lt;a href=&#34;https://mosn.io/docs/configuration/custom/#tls_context&#34;&gt;tls_context 文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster_pool_enable&lt;/code&gt;，可选配置，bool 类型，用于控制所有Cluster是否使用独占的连接池，为 true 则使用Cluster独占连接池，默认值为 false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clusters_configs&lt;/code&gt;，可选配置，字符串类型，用于设置 Cluster 列表从 clusters_configs 指定的文件中解析。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clusters&lt;/code&gt;，用于描述每个 Cluster 所采用的负载均衡算法、类型等细节信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：cluster_manager 中的 clusters 和 clusters_configs 不能同时配置。&lt;/p&gt;
&lt;h2 id=&#34;cluster&#34;&gt;cluster&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;type&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;sub_type&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;lb_type&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;max_request_per_conn&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;conn_buffer_limit_bytes&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;circuit_breakers&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;health_check&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;spec&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;lb_subset_config&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;original_dst_lb_config&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;cluster_manager_tls&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;tls_context&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;hosts&amp;quot;:[],
  &amp;quot;connect_timeout&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;idle_timeout&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;lbconfig&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;dns_refresh_rate&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;respect_dns_ttl&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;dns_lookup_family&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;dns_resolvers&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;dns_resolver_file&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;dns_resolver_port&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;cluster_pool_enable&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，字符串。用作 Cluster 的唯一标识。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;，字符串。用于表示 Cluster 的类型，目前支持的类型如下：
&lt;ul&gt;
&lt;li&gt;SIMPLE，是最基础的类型。&lt;/li&gt;
&lt;li&gt;ORIGINAL_DST，该种类型的&lt;/li&gt;
&lt;li&gt;STRICT_DNS，该种类型会动态解析 Cluster 中的域名列表，并将域名对应的 A 记录全部加入转发列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub_type&lt;/code&gt;，已废弃。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lb_type&lt;/code&gt;，字符串。在集群中选择主机时使用的负载平衡器类型，目前支持的类型如下：
&lt;ul&gt;
&lt;li&gt;LB_ROUNDROBIN，不带权重的轮训转发。&lt;/li&gt;
&lt;li&gt;LB_RANDOM，随机转发。&lt;/li&gt;
&lt;li&gt;LB_WEIGHTED_ROUNDROBIN，根据 host 的权重转发。&lt;/li&gt;
&lt;li&gt;LB_ORIGINAL_DST，在透明劫持场景下使用原始目标地址做转发，也可以通过请求 header 设置目标地址。&lt;/li&gt;
&lt;li&gt;LB_LEAST_REQUEST，选择请求数最少的 host 转发。&lt;/li&gt;
&lt;li&gt;LB_MAGLEV，一致性 hash 转发。&lt;/li&gt;
&lt;li&gt;LB_REQUEST_ROUNDROBIN，同一个请求粒度的轮训转发。&lt;/li&gt;
&lt;li&gt;LB_LEAST_CONNECTION，选择连接数最少的 host 转发。&lt;/li&gt;
&lt;li&gt;LB_PEAK_EWMA，基于延迟的负载均衡算法，通过记录主机的延迟，选择延迟较好并避免选择较差的主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_request_per_conn&lt;/code&gt;，uint32 类型，暂未实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conn_buffer_limit_bytes&lt;/code&gt;，uint32 类型，暂未实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circuit_breakers&lt;/code&gt;，CircuitBreakers 类型，既 &lt;a href=&#34;#Thresholds&#34;&gt;Thresholds&lt;/a&gt; 类型的数组，用于配置 Cluster 的熔断配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;health_check&lt;/code&gt;，&lt;a href=&#34;#HealthCheck&#34;&gt;HealthCheck&lt;/a&gt; 类型，群集可选的健康检查配置。如果未指定该配置，则不会执行主动健康检查，且默认群集中的成员都将是健康状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt;，暂未使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lb_subset_config&lt;/code&gt;，&lt;a href=&#34;#LBSubsetConfig&#34;&gt;LBSubsetConfig&lt;/a&gt; 类型，用于配置负载均衡的子集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;original_dst_lb_config&lt;/code&gt;，&lt;a href=&#34;#LBOriDstConfig&#34;&gt;LBOriDstConfig&lt;/a&gt; 类型，用于配置 LB_ORIGINAL_DST 类型的负载均衡器配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster_manager_tls&lt;/code&gt;，bool 类型，用于控制每个 Cluster 是否使用全局共享的 TLS 配置，为 true 则共享，默认值为 false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls_context&lt;/code&gt;，TLSConfig 类型，连接到上游群集的 TLS 配置。若没有指定 TLS 配置，则新连接不会使用 TLS，配置实例参考 &lt;a href=&#34;https://mosn.io/docs/configuration/custom/#tls_context&#34;&gt;tls_context 文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hosts&lt;/code&gt;，[]&lt;a href=&#34;#Host&#34;&gt;Host&lt;/a&gt;  类型，用于配置 Cluster 中的机器列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect_timeout&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，连接到该群集中主机的超时时长，默认值为 3 秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idle_timeout&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，用于设置 Cluster 中的连接空闲超时时间，若发生超时则会断开连接，中默认值为 0，表示不设置连接的空闲超时。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lbconfig&lt;/code&gt;，&lt;a href=&#34;#lbconfig&#34;&gt;LbConfig&lt;/a&gt;类型，为负载均衡器提供的扩展配置，目前只有 LB_LEAST_REQUEST/LB_LEAST_CONNECTION/LB_PEAK_EWMA 类型的负载均衡器有使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns_refresh_rate&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，在群集类型是 STRICT_DNS 时，用于设置 DNS 刷新频率，此值默认为 5 秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;respect_dns_ttl&lt;/code&gt;，bool 类型，用于设置当 Cluster 类型为 STRICT_DNS 时，其域名对应的解析频率是否遵循 DNS 返回的 TTL。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns_lookup_family&lt;/code&gt;，字符串类型，DNS IP 地址解析策略。 如果未指定此设置，则该值默认为 V4_ONLY。取值列表如下：
&lt;ul&gt;
&lt;li&gt;V4_ONLY，表示只解析 IPv4&lt;/li&gt;
&lt;li&gt;V6_ONLY，表示只解析 IPv6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns_resolvers&lt;/code&gt;，&lt;a href=&#34;#DnsResolverConfig&#34;&gt;DnsResolverConfig&lt;/a&gt; 类型，在群集类型是 STRICT_DNS，此值用于指定群集的 DNS 解析相关配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns_resolver_file&lt;/code&gt;，字符串类型，用于设置 DNS server 列表的文件路径，该值默认为使用 /etc/resolv.conf 配置的默认解析器，该配置项仅在 dns_resolvers 未配置时生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns_resolver_port&lt;/code&gt;，字符串类型，用于设置 DNS server 地址的 port，默认值为 53，该配置项仅在 dns_resolvers 未配置时生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster_pool_enable&lt;/code&gt;，bool 类型，用于控制当前Cluster是否使用独占的连接池，为 true 则使用独占连接池，默认值为 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thresholds&#34;&gt;Thresholds&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;max_connections&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;max_pending_requests&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;max_requests&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;max_retries&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_connections&lt;/code&gt;，uint32 类型。用于设置 Cluster 中每台机器的最大连接数，对于 HTTP 协议，超过后会响应 502，对于多路复用协议则是控制单个 host 建立的最大连接数。默认值为 0 表示不启用该配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_pending_requests&lt;/code&gt;，uint32 类型。代表 Cluster 的最大排队数量，暂未使用到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_requests&lt;/code&gt;，uint32 类型。将对上游群集执行的最大并行请求数，若超过限制则会响应 502，目前仅在 HTTP 系协议下生效。默认值为 0 表示不启用该配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_retries&lt;/code&gt;，uint32 类型。允许上游集群执行的最大并行重试次数，目前只在 HTTP 系协议下生效。默认值为 0 表示不启用该配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;healthcheck&#34;&gt;HealthCheck&lt;/h2&gt;
&lt;p&gt;HealthCheckConfig&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;protocol&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;timeout&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;interval&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;interval_jitter&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;healthy_threshold&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;unhealthy_threshold&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;service_name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;check_config&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;event_log_path&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;common_callbacks&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;，字符串类型，用于设置 Cluster 发起健康检查使用的协议类型，目前只支持 TCP。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，等待健康检查响应的时间。如果达到超时，则尝试健康检查将被视为失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interval&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，每次尝试健康检查之间的时间间隔。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interval_jitter&lt;/code&gt;，&lt;a href=&#34;../custom#duration-string&#34;&gt;Duration&lt;/a&gt; 类型，用于设置 interval 的随机抖动量，设置后将抖动量叠加到 interval 上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;healthy_threshold&lt;/code&gt;，uint32 类型，主机在标记为健康之前所需的连续健康检查次数，默认值为 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unhealthy_threshold&lt;/code&gt;，uint32 类型，在主机被标记为不健康之前，需要进行连续不健康的健康检查次数，默认值为 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service_name&lt;/code&gt;，字符串类型，暂未支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_config&lt;/code&gt;，map[string]interface{} 类型，用于健康检查的扩展配置，当前支持 &amp;ldquo;http_check_config&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event_log_path&lt;/code&gt;, 字符串类型，健康检查日志路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;common_callbacks&lt;/code&gt;，[]string 类型，用于设置对应 Cluster 健康检查时执行的 callback。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lbsubsetconfig&#34;&gt;LBSubsetConfig&lt;/h2&gt;
&lt;p&gt;LBSubsetConfig 主要用于 Cluster 中更为灵活的请求路由，列如 ABTesting、金丝雀发布、单元化等。详细使用可以参考 &lt;a href=&#34;https://mosn.io/blog/posts/how-use-dynamic-metadata/#mosn-subset&#34;&gt;MOSN subset 路由实践&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;fall_back_policy&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;default_subset&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;subset_selectors&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fall_back_policy&lt;/code&gt;，uint8 类型，用于设置在查找子集群失败时的容灾策略，当前支持如下配置：
&lt;ul&gt;
&lt;li&gt;0，表示 NoFallBack，没有查找到匹配的子集群则不使用容灾策略&lt;/li&gt;
&lt;li&gt;1，表示 AnyEndPoint，既在 Cluster 的 Host 列表中轮训选择目标机器&lt;/li&gt;
&lt;li&gt;2，表示使用 DefaultSubset 策略重新查找子集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_subset&lt;/code&gt;，map[string]string 类型，如果 fallback_policy 为 2 既 DEFAULT_SUBSET，则指定在回退期间使用的端点的默认子集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset_selectors&lt;/code&gt;，[][]string 类型，用于设置子集群匹配规则查找的条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lboridstconfig&#34;&gt;LBOriDstConfig&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;use_header&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;header_name&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_header&lt;/code&gt;，bool 类型，将该配置设置为 true 且负载均衡器使用 LB_ORIGINAL_DST 类型时，则转发的目标地址通过 header_name 从当前请求 header 中获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header_name&lt;/code&gt;，字符串类型，用于设置目标地址从 header_name 对应的 header 中获取，默认值为 host。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;host&#34;&gt;Host&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;address&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;hostname&amp;quot;:&amp;quot;&amp;quot;
  &amp;quot;weight&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;metadata&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;tls_disable&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;address&lt;/code&gt;，字符串类型，用于设置集群的地址和端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;，字符串类型，对应地址的名称，可以是一个域名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;，uint32 类型，对应地址的权重。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt;，*MetadataConfig 类型，用于设置对应机器的 metadata 信息，通常和 LBSubsetConfig 一起使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls_disable&lt;/code&gt;，bool 类型，用于标记对应机器是否开启 TLS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dnsresolverconfig&#34;&gt;DnsResolverConfig&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-josn&#34; data-lang=&#34;josn&#34;&gt;{
  &amp;quot;servers&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;search&amp;quot;:&amp;quot;&amp;quot;
  &amp;quot;port&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;ndots&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;timeout&amp;quot;:&amp;quot;&amp;quot;，
  &amp;quot;attempts&amp;quot;:&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;servers&lt;/code&gt;，[]string 类型，用于设置 DNS 服务器列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;，[]string 类型，用于设置和目标域名拼接的后缀列表，结合 ndots 使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;，字符串类型，设置发起 DNS 请求的端口，默认值为 53。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ndots&lt;/code&gt;，int 类型，用于设置 DNS 查询域名是否将 search 中的列表依次追加到待查询域名末尾，如果该值大于待查询域名中的 “.” 数量，则将待查询域名末尾拼依次接 search 中设置的后缀，默认值为 0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;，int 类型，用于设置 DNS 更新超时时间，单位为秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attempts&lt;/code&gt;，int 类型，一次 DNS 请求中尝试查询的 DSN server 的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lbconfig&#34;&gt;LbConfig&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;choice_count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;active_request_bias&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choice_count&lt;/code&gt;，uint32类型，用来设置随机算法的随机选择次数，当配置了&lt;code&gt;lbconfig&lt;/code&gt;时必填，且必须大于0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;active_request_bias&lt;/code&gt;，float64类型，用来设置负载均衡算法对&lt;code&gt;active_request&lt;/code&gt;和&lt;code&gt;connection_active&lt;/code&gt;指标的偏好&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 变量机制</title>
      <link>https://mosn.io/docs/developer-guide/variable/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/developer-guide/variable/</guid>
      <description>
        
        
        &lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;
&lt;p&gt;MOSN 为开发者提供了灵活的变量机制，用户通过变量机制能够实现以下目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取请求上下文的相关信息&lt;/li&gt;
&lt;li&gt;在一次请求的生命周期内传递自定义数据 (跨 Filter 传递数据)&lt;/li&gt;
&lt;li&gt;影响 MOSN 路由框架的运行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二快速开始&#34;&gt;二、快速开始&lt;/h1&gt;
&lt;p&gt;假设我们现在正在开发一个 &lt;code&gt;simpleFilter&lt;/code&gt;，该 Filter 处理 Http 请求，且需要实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断请求的 &lt;code&gt;Method&lt;/code&gt;，只接受&lt;code&gt;Post&lt;/code&gt;请求&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;Post&lt;/code&gt;请求 URL 中的 &lt;code&gt;Query String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然，通过请求的 &lt;code&gt;Header&lt;/code&gt;、&lt;code&gt;Body&lt;/code&gt; 和 &lt;code&gt;Trailer&lt;/code&gt;是无法获取请求的&lt;code&gt;Method&lt;/code&gt;信息，也无法修改请求的 URL，但我们可以通过变量机制实现以上功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;simpleFilter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;OnReceive&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;headers&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HeaderMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IoBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;trailers&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HeaderMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StreamFilterStatus&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;   
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1. 通过变量机制获取请求 Method
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GetString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;VarMethod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StreamFilterStop&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 2. 拦截非 Post 请求
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fasthttp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MethodPost&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StreamFilterStop&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 3. 修改请求 URL 中的 Query String
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;VarQueryString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello=world&amp;amp;foo=bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StreamFilterContinue&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上述简单例子可见，MOSN 变量机制允许开发者灵活地获取请求上下文的相关信息，并按需修改请求的内容。当然，变量机制的功能远不止上述 Filter 展现的能力，下文将详细介绍变量机制的方方面面。&lt;/p&gt;
&lt;h1 id=&#34;三现有变量&#34;&gt;三、现有变量&lt;/h1&gt;
&lt;p&gt;上文的例子展示了如何通过变量机制获取请求的 &lt;code&gt;Method&lt;/code&gt;信息。除此之外，MOSN 还提供了大量变量，用于提供请求的上下文信息。&lt;/p&gt;
&lt;p&gt;下面的表格中，&lt;code&gt;变量名&lt;/code&gt;一列方便开发者在编写代码的过程中获取变量内容；&lt;code&gt;字符串值&lt;/code&gt;一列则方便在配置文件中获取变量值 (例如配置 &lt;code&gt;access_log&lt;/code&gt;时使用 &lt;code&gt;%bytes_received%&lt;/code&gt; 获取变量内容)。&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大部分变量通常具有只读属性，若不清楚后续影响，请不要试图修改变量值&lt;/li&gt;
&lt;li&gt;MOSN 的变量机制支持任意类型 &lt;code&gt;interface{}&lt;/code&gt;的变量，但目前提供的绝大多数变量都是 string 类型的，下文如无特殊备注，均为 string 类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;31-通用变量&#34;&gt;3.1 通用变量&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;字符串值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VarStartTime&lt;/td&gt;
&lt;td&gt;&amp;ldquo;start_time&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求开始时间，七层 stream 开始创建的时间&lt;/td&gt;
&lt;td&gt;格式：&amp;ldquo;2006/01/02 15:04:05.000&amp;rdquo;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarRequestReceivedDuration&lt;/td&gt;
&lt;td&gt;&amp;ldquo;request_received_duration&amp;rdquo;&lt;/td&gt;
&lt;td&gt;接收 downstream 请求的耗时，从请求开始，到开始向 upstream 转发请求为止的耗时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarResponseReceivedDuration&lt;/td&gt;
&lt;td&gt;&amp;ldquo;response_received_duration&amp;rdquo;&lt;/td&gt;
&lt;td&gt;接收 upstream 响应的耗时，从请求开始，到收到 upstream 响应为止的耗时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarRequestFinishedDuration&lt;/td&gt;
&lt;td&gt;&amp;ldquo;request_finished_duration&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求耗时，从请求开始，到请求结束为止的耗时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarBytesSent&lt;/td&gt;
&lt;td&gt;&amp;ldquo;bytes_sent&amp;rdquo;&lt;/td&gt;
&lt;td&gt;发出的字节数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarBytesReceived&lt;/td&gt;
&lt;td&gt;&amp;ldquo;bytes_received&amp;rdquo;&lt;/td&gt;
&lt;td&gt;收到的字节数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProtocol&lt;/td&gt;
&lt;td&gt;&amp;ldquo;protocol&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求的具体协议&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarResponseCode&lt;/td&gt;
&lt;td&gt;&amp;ldquo;response_code&amp;rdquo;&lt;/td&gt;
&lt;td&gt;响应码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarDuration&lt;/td&gt;
&lt;td&gt;&amp;ldquo;duration&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求开始至今的耗时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarResponseFlag&lt;/td&gt;
&lt;td&gt;&amp;ldquo;response_flag&amp;rdquo;&lt;/td&gt;
&lt;td&gt;响应 flag&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarResponseFlags&lt;/td&gt;
&lt;td&gt;&amp;ldquo;response_flags&amp;rdquo;&lt;/td&gt;
&lt;td&gt;响应 flags&lt;/td&gt;
&lt;td&gt;&amp;ldquo;response_flag&amp;rdquo; 和 &amp;ldquo;response_flags&amp;rdquo; 两个变量的内容完全一致，后者 &amp;ldquo;flags&amp;rdquo; 是为了与 istio 日志格式保持一致，&lt;a href=&#34;https://github.com/mosn/mosn/commit/f46acc354897e9b1ca20e91c43871a167b4eba27&#34;&gt;参考&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarUpstreamLocalAddress&lt;/td&gt;
&lt;td&gt;&amp;ldquo;upstream_local_address&amp;rdquo;&lt;/td&gt;
&lt;td&gt;upstream 本端地址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarDownstreamLocalAddress&lt;/td&gt;
&lt;td&gt;&amp;ldquo;downstream_local_address&amp;rdquo;&lt;/td&gt;
&lt;td&gt;downstream 本端地址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarDownstreamRemoteAddress&lt;/td&gt;
&lt;td&gt;&amp;ldquo;downstream_remote_address&amp;rdquo;&lt;/td&gt;
&lt;td&gt;downstream 远端地址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarUpstreamHost&lt;/td&gt;
&lt;td&gt;&amp;ldquo;upstream_host&amp;rdquo;&lt;/td&gt;
&lt;td&gt;upstream 主机名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarUpstreamTransportFailureReason&lt;/td&gt;
&lt;td&gt;&amp;ldquo;upstream_transport_failure_reason&amp;rdquo;&lt;/td&gt;
&lt;td&gt;upstream 传输失败原因&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarUpstreamCluster&lt;/td&gt;
&lt;td&gt;&amp;ldquo;upstream_cluster&amp;rdquo;&lt;/td&gt;
&lt;td&gt;upstream 集群名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProtocolConfig&lt;/td&gt;
&lt;td&gt;&amp;ldquo;protocol_config&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求的协议配置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyTryTimeout&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_try_timeout&amp;rdquo;&lt;/td&gt;
&lt;td&gt;每次 upstream 请求的超时时间&lt;/td&gt;
&lt;td&gt;每个 upstream 请求的超时时间 (包含正常请求和重试请求)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyGlobalTimeout&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_global_timeout&amp;rdquo;&lt;/td&gt;
&lt;td&gt;所有 upstream 请求的总超时时间&lt;/td&gt;
&lt;td&gt;所有 upstream 请求的总超时 (包含正常请求和重试请求)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyHijackStatus&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_hijack_status&amp;rdquo;&lt;/td&gt;
&lt;td&gt;hijack 状态&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyGzipSwitch&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_gzip_switch&amp;rdquo;&lt;/td&gt;
&lt;td&gt;gzip 开关&lt;/td&gt;
&lt;td&gt;用于 &lt;code&gt;pkg/filter/stream/gzip&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyIsDirectResponse&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_direct_response&amp;rdquo;&lt;/td&gt;
&lt;td&gt;是否是 direct response&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyDisableRetry&lt;/td&gt;
&lt;td&gt;&amp;ldquo;proxy_disable_retry&amp;rdquo;&lt;/td&gt;
&lt;td&gt;是否不允许请求重试&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarDirection&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-direction&amp;rdquo;&lt;/td&gt;
&lt;td&gt;流向&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarScheme&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-scheme&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Scheme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHost&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-host&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Host&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPath&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-path&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Path&lt;/td&gt;
&lt;td&gt;已转义，human-readable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPathOriginal&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-path-original&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求原始 Path&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarQueryString&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-querystring&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Query&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarMethod&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-method&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarIstioHeaderHost&lt;/td&gt;
&lt;td&gt;&amp;ldquo;authority&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Host&lt;/td&gt;
&lt;td&gt;内容同 VarHost，与 istio 保持一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHeaderStatus&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-status&amp;rdquo;&lt;/td&gt;
&lt;td&gt;状态码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHeaderRPCService&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-rpc-service&amp;rdquo;&lt;/td&gt;
&lt;td&gt;RPC Service&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHeaderRPCMethod&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-rpc-method&amp;rdquo;&lt;/td&gt;
&lt;td&gt;RPC Method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarRouterMeta&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x-mosn-router-meta&amp;rdquo;&lt;/td&gt;
&lt;td&gt;路由 meta&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;32-http1-协议变量&#34;&gt;3.2 Http1 协议变量&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;字符串值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestScheme&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_scheme&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Scheme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestMethod&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_method&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestLength&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_length&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求长度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestUri&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_uri&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 URI&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestPath&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_path&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Path&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestPathOriginal&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_path_original&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求原始 Path&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttpRequestArg&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_arg&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Query&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttpHeader&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_header_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Header 值&lt;/td&gt;
&lt;td&gt;前缀变量，需 + &amp;ldquo;headerName&amp;rdquo; 获取对应 header 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttpArg&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_request_arg_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Query 值&lt;/td&gt;
&lt;td&gt;前缀变量，需 + &amp;ldquo;QueryName&amp;rdquo; 获取对应 query 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttpCookie&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http1_cookie_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Cookie 值&lt;/td&gt;
&lt;td&gt;前缀变量，需 + &amp;ldquo;CookieName&amp;rdquo; 获取对应 cookie 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;33-http2-协议变量&#34;&gt;3.3 Http2 协议变量&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;字符串值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestScheme&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_scheme&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Scheme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestMethod&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_method&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Method&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestLength&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_length&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求长度&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestUri&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_uri&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 URI&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestPath&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_path&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Path&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestPathOriginal&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_path_original&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求原始 Path&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestArg&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_arg&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求 Query&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2RequestUseStream&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_use_stream&amp;rdquo;&lt;/td&gt;
&lt;td&gt;请求是否为流式&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarHttp2ResponseUseStream&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_response_use_stream&amp;rdquo;&lt;/td&gt;
&lt;td&gt;响应是否为流式&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttp2Header&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_header_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Header 值&lt;/td&gt;
&lt;td&gt;前缀变量，需 + &amp;ldquo;headerName&amp;rdquo; 获取对应 header 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttp2Arg&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_request_arg_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Query 值&lt;/td&gt;
&lt;td&gt;未实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarPrefixHttp2Cookie&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Http2_cookie_&amp;rdquo;&lt;/td&gt;
&lt;td&gt;获取请求 Cookie 值&lt;/td&gt;
&lt;td&gt;前缀变量，需 + &amp;ldquo;CookieName&amp;rdquo; 获取对应 cookie 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;34-其它变量&#34;&gt;3.4 其它变量&lt;/h3&gt;
&lt;p&gt;MOSN 还包含一些特殊模块的变量，对于这些变量，基本原则是：如果你不知道要用这些变量，那就不要用&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;字符串值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.VarGrpcServiceName&lt;/td&gt;
&lt;td&gt;&amp;ldquo;gRPC_serviceName&amp;rdquo;&lt;/td&gt;
&lt;td&gt;GRPC 请求 Service&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.VarGrpcRequestResult&lt;/td&gt;
&lt;td&gt;&amp;ldquo;requestResult&amp;rdquo;&lt;/td&gt;
&lt;td&gt;GRPC 请求结果&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dubbo.VarDubboRequestService&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Dubbo_service&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Dubbo 请求 Service&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dubbo.VarDubboRequestMethod&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Dubbo_method&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Dubbo 请求方法&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seata.XID&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x_seata_xid&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seata.BranchID&lt;/td&gt;
&lt;td&gt;&amp;ldquo;x_seata_branch_id&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;四增加自定义变量&#34;&gt;四、增加自定义变量&lt;/h1&gt;
&lt;p&gt;上文罗列了 MOSN 中已经预定义的所有变量，基本能够满足 MOSN 路由转发场景的需求，若仍有未能满足的定制化需求，可以考虑通过自定义变量的方式来实现。&lt;/p&gt;
&lt;p&gt;一个典型的使用场景是跨 Filter 传递数据，即 &lt;code&gt;Filter1&lt;/code&gt; 处理完请求后希望将自定义数据传递给后续 &lt;code&gt;Filter2、3&lt;/code&gt; 处理。实现这一需求的方法有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方案一：使用请求 Header 携带自定义数据&lt;/li&gt;
&lt;li&gt;方案二：使用请求 ctx 携带自定义数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方案一的缺点在于会污染用户的原始请求，&lt;code&gt;Filter1&lt;/code&gt;塞进 Header 的数据需要在后续 &lt;code&gt;Filter&lt;/code&gt;中清理掉，否则就是被带到上游服务端。此外，受限于 Header 值的类型是 string，方案一无法携带非 string 类型的数据。&lt;/p&gt;
&lt;p&gt;方案二的缺点在于性能，ctx 的底层实现是单链表结构，每使用 &lt;code&gt;context.WithValue&lt;/code&gt;添加一个数据时均会将单链表延长一节，且从 ctx 获取数据时，需要遍历单链表，时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MOSN 提供的变量机制即是解决上述问题的推荐方案。使用变量机制传递自定义数据具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型无限制：除了最基础的 string 类型外，支持 interface{} 类型的自定义数据&lt;/li&gt;
&lt;li&gt;性能优异：读写自定义变量的时间复杂度均为 &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无侵入性：不侵入用户原始请求、不侵入其它 Filter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MOSN 变量框架提供以下 API 来操作变量：
本节所有 API 均位于 &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/pkg/variable&#34;&gt;mosn.io/mosn/pkg/variable&lt;/a&gt; 包&lt;/p&gt;
&lt;h3 id=&#34;41-注册变量&#34;&gt;4.1 注册变量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 注册新变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 需要在 init 函数中调用，否则可能不生效
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Register&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 注册前缀变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 需要在 init 函数中调用，否则可能不生效
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RegisterPrefix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 检查是否已注册某变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Check&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;42-创建变量&#34;&gt;4.2 创建变量&lt;/h3&gt;
&lt;p&gt;Variable 类型的变量通过以下 API 创建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 新建 string 类型变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;NewStringVariable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getter&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StringGetterFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setter&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StringSetterFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint32&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Variable&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 新建 interface{} 类型变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;NewVariable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getter&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetterFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setter&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetterFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint32&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于绝大多数 (99.99%) 使用场景而言，并不需要去理解上述两个 API 的所有入参的含义，MOSN 变量框架提供了默认实现，直接 Ctrl-CV 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 方式一：
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 创建并注册新变量：Hello_Variable_1
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewVariable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello_Variable_1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultSetter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 方式二：
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 创建并注册新变量：Hello_Variable_2
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewVariable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello_Variable_2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;valueGetter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述两种方式的主要区别在于新创建的变量是否有初始值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式一创建的变量没有初始值，需要先调用 &lt;code&gt;Set&lt;/code&gt;方法设置内容后，&lt;code&gt;Get&lt;/code&gt;方法才能获取到&lt;/li&gt;
&lt;li&gt;方式二创建的变量有初始值，初始值由自定义函数 &lt;code&gt;valueGetter&lt;/code&gt;提供，无需先 &lt;code&gt;Set&lt;/code&gt;便可获取到内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方式一通常更符合自定义变量的使用场景，即自定义变量需要先 &lt;code&gt;Set&lt;/code&gt;后 &lt;code&gt;Get&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方式二则是 MOSN 框架自身常用的用法，例如：对于 &lt;code&gt;&amp;quot;Http1_request_method&amp;quot;&lt;/code&gt;这个变量而言，① 它是有初始值的，无需先&lt;code&gt;Set&lt;/code&gt;；② 它的获取方式较为复杂，需要用底层 Http 请求的结构体中获取，因此在 MOSN 中，该变量的创建方式为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;variable.NewStringVariable(types.&lt;em&gt;VarHttpRequestMethod&lt;/em&gt;, nil, requestMethodGetter, nil, 0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中 &lt;code&gt;requestMethodGetter&lt;/code&gt;便是从 Http 请求的底层结构体获取 Method 值。&lt;/p&gt;
&lt;h3 id=&#34;43-使用变量&#34;&gt;4.3 使用变量&lt;/h3&gt;
&lt;p&gt;一旦注册好变量，便可通过以下 API 来读写变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 获取 string 类型变量值
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 string 类型变量值
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 获取 interface{} 类型变量值，string 类型变量也可通过该 API 获取，Set 同理
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 interface{} 类型变量值
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 创建 VariableContext
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 需要注意的是，使用变量机制时，ctx 必须是以下函数创建的 VariableContext
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// MOSN 框架中的 ctx 已经默认是 VariableContext，无需额外调用该函数。但在单测场景，需要使用该函数创建 VariableContext，否则无法正常使用变量
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;NewVariableContext&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;五通过变量机制与-mosn-路由框架进行交互&#34;&gt;五、通过变量机制与 MOSN 路由框架进行交互&lt;/h1&gt;
&lt;p&gt;变量机制除了上文所展现的 “数据搬运工” 的身份外，还具备影响 MOSN 核心路由框架的能力。MOSN 核心路由框架本身会在路由过程中读取某些变量来进行路由决策，因此，开发者可以直接通过变量机制来影响 MOSN 路由的结果。MOSN 变量机制支持以下能力：&lt;/p&gt;
&lt;h3 id=&#34;51-通过变量修改路由元信息&#34;&gt;5.1 通过变量修改路由元信息&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;详细解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyTryTimeout&lt;/td&gt;
&lt;td&gt;每次 upstream 请求的超时时间&lt;/td&gt;
&lt;td&gt;用于设置每个 upstream 请求的超时时间 (单个正常和重试请求的超时)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyGlobalTimeout&lt;/td&gt;
&lt;td&gt;所有 upstream 请求的总超时时间&lt;/td&gt;
&lt;td&gt;用于设置所有 upstream 请求的总超时 (正常 + 重试请求的总超时)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarProxyDisableRetry&lt;/td&gt;
&lt;td&gt;是否不允许请求重试&lt;/td&gt;
&lt;td&gt;upstream 请求失败时，是否允许重试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VarRouterMeta&lt;/td&gt;
&lt;td&gt;路由 meta&lt;/td&gt;
&lt;td&gt;该变量设置的 metadata 后续会被用于 MOSN 路由时选择与之匹配的 Host。典型应用场景是 &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/pkg/filter/stream/headertometadata&#34;&gt;header_to_metadata&lt;/a&gt; 这个 Filter，它将请求 Header 中的数据作为 metadata 塞入变量中，用于后续的 MOSN 路由，使用者便可直接通过 Header 值来控制路由结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;52-通过变量指定路由集群&#34;&gt;5.2 通过变量指定路由集群&lt;/h3&gt;
&lt;p&gt;用户可以在 mosn.json 配置中指定用于匹配路由集群的变量名，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	&amp;quot;routers&amp;quot;: [{
		&amp;quot;router_config_name&amp;quot;: &amp;quot;hello_mosn&amp;quot;,
		&amp;quot;virtual_hosts&amp;quot;: [{
			&amp;quot;name&amp;quot;: &amp;quot;mosnHost&amp;quot;,
			&amp;quot;domains&amp;quot;: [&amp;quot;*&amp;quot;],
			&amp;quot;routers&amp;quot;: [{
				&amp;quot;match&amp;quot;: {&amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;},
				&amp;quot;route&amp;quot;: {&amp;quot;cluster_variable&amp;quot;: &amp;quot;VAR_NAME&amp;quot;}
			}]
		}]
	}]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述配置下，MOSN 在路由时会获取变量 &lt;code&gt;VAR_NAME&lt;/code&gt;的值，并将请求路由到该变量值对应的 Cluster 上：用户可以在路由前 (&lt;code&gt;BeforeRoute&lt;/code&gt;) 的 Filter 中，通过以下代码让请求被路由到 &lt;code&gt;dst_cluster&lt;/code&gt;这个集群上：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;variable.SetString(ctx, VAR_NAME, &amp;ldquo;dst_cluster&amp;rdquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;53-通过变量影响路由匹配结果&#34;&gt;5.3 通过变量影响路由匹配结果&lt;/h3&gt;
&lt;p&gt;用于可以在 mosn.json 配置中指定用于匹配路由的变量名，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;routers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello_mosn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;virtual_hosts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosnHost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;routers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
				&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
					&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
						&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;VAR_NAME&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
						&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;VAR_VALUE&amp;#34;&lt;/span&gt;
					&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
				&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
				&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cluster_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dst_cluster&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述配置下，MOSN 在路由时，会将具有变量 &lt;code&gt;VAR_NAME&lt;/code&gt;且变量值为 &lt;code&gt;VAR_VALUE&lt;/code&gt;的请求转发到 &lt;code&gt;dst_cluster&lt;/code&gt;这个集群上&lt;/p&gt;
&lt;h1 id=&#34;六总结&#34;&gt;六、总结&lt;/h1&gt;
&lt;p&gt;综上，变量机制是 MOSN 提供高可扩展性的重要一环，本文对 MOSN 中的变量机制进行了详细介绍，由浅及深，从介绍现有变量开始，到增加自定义变量，再到使用变量与 MOSN 核心路由框架进行交互，供用户一窥变量机制的全貌。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Router 配置</title>
      <link>https://mosn.io/docs/products/configuration-overview/server/router/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/server/router/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;router&lt;/code&gt; 用于描述 MOSN 的路由配置，通常与 proxy 配合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;router_config_name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;virtual_hosts&amp;quot;: [
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;router_config_name&lt;/code&gt;，唯一的路由配置标识，与 &lt;code&gt;proxy&lt;/code&gt; 中配置的字段对应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virtual_hosts&lt;/code&gt;，描述具体的路由规则细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;virtualhost&#34;&gt;VirtualHost&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;routers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，字符串。用作 virtual host 的唯一标识。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domains&lt;/code&gt;，字符串数组。表示一组可以匹配到该 virtual host 的 domain，支持配置通配符。domain 的匹配优先级如下：
&lt;ul&gt;
&lt;li&gt;首先匹配精确的，如 &lt;code&gt;www.foo.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其次匹配最长后缀的通配符，如 &lt;code&gt;*.foo.com&lt;/code&gt;、&lt;code&gt;*-bar.foo.com&lt;/code&gt;，其中如果一个 domain 是 &lt;code&gt;foo-bar.foo.com&lt;/code&gt;，那么会优先匹配 &lt;code&gt;*-bar.foo.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后匹配任意domain的通配符 &lt;code&gt;*&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routers&lt;/code&gt;，一组具体的路由匹配规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;router&#34;&gt;Router&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;redirect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;direct_response&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;per_filter_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;/code&gt;，路由的匹配参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;，路由行为，描述请求将被路由的 upstream 信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect&lt;/code&gt;，路由行为，直接转发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;direct_response&lt;/code&gt;， 路由行为，直接响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;per_filter_config&lt;/code&gt;，是一个 &lt;code&gt;key: json&lt;/code&gt; 格式的 json。&lt;/li&gt;
&lt;li&gt;其中 key 需要匹配一个 stream filter 的 type，key 对应的 json 是该 stream filter 的 config。
&lt;ul&gt;
&lt;li&gt;当配置了该字段时，对于某些 stream filter（依赖具体 filter 的实现），可以使用该字段表示的配置覆盖原有 stream filter 的配置，以此做到路由匹配级别的 stream filter 配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;match&#34;&gt;match&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;regex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;dsl_expressions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;路径（path）匹配
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;，表示路由会匹配 path 的前缀，该配置的优先级高于 path 和 regex。 如果 prefix 被配置，那么请求首先要满足 path 的前缀与 prefix 配置相符合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;，表示路由会匹配精确的 path，该配置的优先级高于 regex。如果 path被配置，那么请求首先要满足 path 与 path 配置相符合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;，表示路由会按照正则匹配的方式匹配 path。如果 regex 被配置，那么请求首先要满足 path 与 regex 配置相符合。&lt;/li&gt;
&lt;li&gt;路径匹配配置同时存在时，只有高优先级的配置会生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Header 匹配
&lt;ul&gt;
&lt;li&gt;headers，表示一组请求需要匹配的 header。请求需要满足配置中所有的 Header 配置条件才算匹配成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variable 匹配
&lt;ul&gt;
&lt;li&gt;variables，表示一组请求需要匹配的 variable，请求需要满足配置中所有的 variable 配置条件才算匹配成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DSL 匹配
&lt;ul&gt;
&lt;li&gt;dsl_expressions，表示一组请求需要匹配的 dsl，请求满足配置条件才算匹配成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;header&#34;&gt;header&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;regex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，表示 header 的 key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;，表示 header 对应 key 的 value。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;，bool 类型，如果为 true，表示 value 支持按照正则表达式的方式进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;variable&#34;&gt;variable&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;regex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，表示 variable 的 key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;，表示 variable 对应 key 的 value。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;，表示按照正则表达式的方式进行匹配。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;，可配置 &amp;ldquo;and&amp;rdquo; 和 “or”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;route&#34;&gt;route&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;cluster_name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;cluster_variable&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;metadata_match&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;timeout&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;retry_policy&amp;quot;:{},
  &amp;quot;hash_policy&amp;quot;:{},
  &amp;quot;prefix_rewrite&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;regex_rewrite&amp;quot;:{},
  &amp;quot;host_rewrite&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;request_headers_to_add&amp;quot;:[],
  &amp;quot;request_headers_to_remove&amp;quot;:[],
  &amp;quot;response_headers_to_add&amp;quot;:[],
  &amp;quot;response_headers_to_remove&amp;quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;满足&lt;code&gt;match&lt;/code&gt;之后的路由策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster_name&lt;/code&gt;，表示请求将路由到的 upstream cluster。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster_variable&lt;/code&gt;，表示请求将路由到的变量指定的 upstream cluster，可动态设置变量路由到不同的后端。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata_match&lt;/code&gt;，&lt;a href=&#34;../../custom#metadata&#34;&gt;metadata&lt;/a&gt;，如果配置了该字段，表示该路由会基于该 metadata 去匹配 upstream cluster 的 subset 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;，&lt;a href=&#34;../../custom#duration-string&#34;&gt;Duration String&lt;/a&gt;，表示默认情况下请求转发的超时时间。如果请求中明确指定了超时时间，那么这个配置会被忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retry_policy&lt;/code&gt;，重试配置，表示如果请求在遇到了特定的错误时采取的重试策略，默认没有配置的情况下，表示没有重试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_policy&lt;/code&gt;，一致性Hash负载均衡算法使用的hash key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix_rewrite&lt;/code&gt; &lt;code&gt;regex_rewrite&lt;/code&gt; &lt;code&gt;host_rewrite&lt;/code&gt;，修改请求的 &lt;code&gt;path&lt;/code&gt; 和 &lt;code&gt;host&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request_headers_to_add&lt;/code&gt; &lt;code&gt;request_headers_to_remove&lt;/code&gt;，表示增加或者删除请求的 header。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response_headers_to_add&lt;/code&gt; &lt;code&gt;response_headers_to_remove&lt;/code&gt;，表示增加或者删除响应的 header。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redirect&#34;&gt;redirect&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;response_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;path_redirect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;host_redirect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;scheme_redirect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;满足 match 条件之后，对请求进行跳转。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response_code&lt;/code&gt;，跳转的 HTTP code，默认为 &lt;code&gt;301&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path_redirect&lt;/code&gt;，修改跳转的 &lt;code&gt;path&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host_redirect&lt;/code&gt;，修改跳转的 &lt;code&gt;host&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scheme_redirect&lt;/code&gt;，修改跳转的 &lt;code&gt;scheme&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;direct_response&#34;&gt;direct_response&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接回复响应， &lt;code&gt;status&lt;/code&gt;是状态码，&lt;code&gt;body&lt;/code&gt;是内容。&lt;/p&gt;
&lt;h2 id=&#34;retry_policy&#34;&gt;retry_policy&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;retry_on&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;retry_timeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;num_retries&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status_codes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;retry_on&lt;/code&gt;，bool 类型，表示是否开启重试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retry_timeout&lt;/code&gt;，&lt;a href=&#34;../../custom#duration-string&#34;&gt;Duration String&lt;/a&gt;，表示每次重试的超时时间。当 &lt;code&gt;retry_timeout&lt;/code&gt; 大于 route 配置的 timeout 或者请求明确指定的 timeout 时，属于无效配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_retries&lt;/code&gt;，表示最大的重试次数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status_codes&lt;/code&gt;，重试状态码，配置后仅列表中的状态码会触发重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;h3 id=&#34;默认匹配规则&#34;&gt;默认匹配规则&lt;/h3&gt;
&lt;p&gt;所有请求转发到名字为 &lt;code&gt;backend&lt;/code&gt; 的 cluster 集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
            &amp;quot;prefix&amp;quot;:&amp;quot;/&amp;quot;
        },
        &amp;quot;route&amp;quot;: {
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配规则---路径&#34;&gt;匹配规则 - 路径&lt;/h3&gt;
&lt;p&gt;请求 &lt;code&gt;/index.html&lt;/code&gt; 转发到名字为 &lt;code&gt;backend&lt;/code&gt; 的 cluster 集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
            &amp;quot;path&amp;quot;:&amp;quot;/index.html&amp;quot;
        },
        &amp;quot;route&amp;quot;: {
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配规则---正则&#34;&gt;匹配规则 - 正则&lt;/h3&gt;
&lt;p&gt;数字开头的请求转发到名字为 &lt;code&gt;backend&lt;/code&gt; 的 cluster 集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
            &amp;quot;regex&amp;quot;:&amp;quot;^/\\d+&amp;quot;
        },
        &amp;quot;route&amp;quot;: {
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配规则---header&#34;&gt;匹配规则 - header&lt;/h3&gt;
&lt;p&gt;包含 &lt;code&gt;a:b&lt;/code&gt; header的请求转发到名字为 &lt;code&gt;backend&lt;/code&gt; 的 cluster 集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
            &amp;quot;headers&amp;quot;: [{
               &amp;quot;name&amp;quot;:&amp;quot;a&amp;quot;,
               &amp;quot;value&amp;quot;:&amp;quot;b&amp;quot;,
	       &amp;quot;regex&amp;quot;:false
            }]
        },
        &amp;quot;route&amp;quot;: {
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配规则---变量&#34;&gt;匹配规则 - 变量&lt;/h3&gt;
&lt;p&gt;可以通过 filter 设置新的变量，以及 MOSN 内置的变量，进行路由转发规则。&lt;br&gt;
如下例子变量 &lt;code&gt;x-mosn-path&lt;/code&gt;（ MOSN 内置变量，表示请求的 &lt;code&gt;path&lt;/code&gt;） 等于 &lt;code&gt;/b&lt;/code&gt; 满足匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
            &amp;quot;variables&amp;quot;: [{
               &amp;quot;name&amp;quot;:&amp;quot;x-mosn-path&amp;quot;,
               &amp;quot;value&amp;quot;:&amp;quot;/b&amp;quot;
            }]
        },
        &amp;quot;route&amp;quot;: {
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配行为---修改path&#34;&gt;匹配行为 - 修改path&lt;/h3&gt;
&lt;p&gt;下例把请求的 &lt;code&gt;path&lt;/code&gt; 修改为 &lt;code&gt;/abc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
        },
       &amp;quot;route&amp;quot;:{
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;,
           &amp;quot;prefix_rewrite&amp;quot;: &amp;quot;/abc&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配行为---添加删除-header&#34;&gt;匹配行为 - 添加删除 header&lt;/h3&gt;
&lt;p&gt;下例在转发给后端之前，新增&lt;code&gt;test:ok&lt;/code&gt; ，删除&lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
        },
       &amp;quot;route&amp;quot;:{
           &amp;quot;cluster_name&amp;quot;: &amp;quot;backend&amp;quot;,
           &amp;quot;request_headers_to_add&amp;quot;: [
               {
                   &amp;quot;header&amp;quot;: {
                       &amp;quot;key&amp;quot;: &amp;quot;test&amp;quot;,
                       &amp;quot;value&amp;quot;: &amp;quot;ok&amp;quot;
                   }
               }
           ],
           &amp;quot;request_headers_to_remove&amp;quot;:[&amp;quot;hello&amp;quot;]
        }
    }
]

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配行为---redirect&#34;&gt;匹配行为 - redirect&lt;/h3&gt;
&lt;p&gt;除了转发到 cluster 之外，也支持 redirect 的匹配动作。&lt;br&gt;
下例将 &lt;code&gt;301&lt;/code&gt; 跳转，&lt;code&gt;Location: http://test/b&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
        },
       &amp;quot;redirect&amp;quot;:{
           &amp;quot;response_code&amp;quot;:301,
           &amp;quot;path_redirect&amp;quot;:&amp;quot;/b&amp;quot;,
           &amp;quot;host_redirect&amp;quot;:&amp;quot;test&amp;quot;,
           &amp;quot;scheme_redirect&amp;quot;:&amp;quot;http&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;匹配行为---直接响应&#34;&gt;匹配行为 - 直接响应&lt;/h3&gt;
&lt;p&gt;满足匹配条件直接响应请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;routers&amp;quot;: [
    {
        &amp;quot;match&amp;quot;:{
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
        },
       &amp;quot;direct_response&amp;quot;:{
           &amp;quot;status&amp;quot;:404,
           &amp;quot;body&amp;quot;:&amp;quot;no found&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;高级技巧&#34;&gt;高级技巧&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mosn.io/blog/posts/how-use-dynamic-metadata/&#34;&gt;MOSN 路由框架详解&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: connection_manager</title>
      <link>https://mosn.io/docs/products/configuration-overview/server/listener/network-filter/connection-manager/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/server/listener/network-filter/connection-manager/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;connection_manager&lt;/code&gt; 用于描述 MOSN 的路由配置，通常与 proxy 配合使用。配置详细描述见&lt;a href=&#34;../../../router&#34;&gt;router&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意：这是一个已经废弃的配置项。依然保留它的存在，是为了兼容性考虑。
新的配置模式下，应该配置在&lt;a href=&#34;../../../../server&#34;&gt;server&lt;/a&gt;的routers中&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 编码规范</title>
      <link>https://mosn.io/docs/developer-guide/code-review/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/developer-guide/code-review/</guid>
      <description>
        
        
        &lt;h2 id=&#34;mosn编码规范&#34;&gt;MOSN编码规范&lt;/h2&gt;
&lt;p&gt;Go Code Review Comments &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;https://github.com/golang/go/wiki/CodeReviewComments&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自定义配置</title>
      <link>https://mosn.io/docs/products/configuration-overview/custom/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/configuration-overview/custom/</guid>
      <description>
        
        
        &lt;p&gt;本文是对 MOSN 自定义配置的说明。&lt;/p&gt;
&lt;h3 id=&#34;duration-string&#34;&gt;Duration String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;字符串，由一个十进制数字和一个时间单位后缀组成，有效的时间单位为 &lt;code&gt;ns&lt;/code&gt;、&lt;code&gt;us&lt;/code&gt;（或&lt;code&gt;µs&lt;/code&gt;）、&lt;code&gt;ms&lt;/code&gt;、&lt;code&gt;s&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt;、&lt;code&gt;h&lt;/code&gt;，例如 &lt;code&gt;1h&lt;/code&gt;、&lt;code&gt;3s&lt;/code&gt;、&lt;code&gt;500ms&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metadata&#34;&gt;metadata&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;metadata&lt;/code&gt; 用于 MOSN 路由和 Cluster Host 之间的匹配。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_metadata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;mosn.lb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;mosn.lb&lt;/code&gt; 可对应任意的 &lt;code&gt;string-string&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;h3 id=&#34;tls_context&#34;&gt;tls_context&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ca_cert&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cert_chain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;private_key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;verify_client&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;require_client_cert&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;insecure_skip&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cipher_suites&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ecdh_curves&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;min_version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;max_version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;alpn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fall_back&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_verify&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sds_source&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;，bool类型，表示是否开启 TLS，默认是 false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;，字符串类型，描述 tls_context 的类型。tls_context 支持扩展实现，不同的 type 对应不同的实现方式，默认实现方式对应的 type 是空字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server_name&lt;/code&gt;，当没有配置 insecure_skip 时，用于校验服务端返回证书的 hostname。作为Cluster配置时有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ca_cert&lt;/code&gt;，证书签发的根 CA 证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cert_chain&lt;/code&gt;，TLS 证书链配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private_key&lt;/code&gt;，证书私钥配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_client&lt;/code&gt;，bool 类型，作为 Listener 配置时有效，表示是否要校验 Client 端证书&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require_client_cert&lt;/code&gt;，bool 类型，表示是否强制 Client 端必须携带证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insecure_skip&lt;/code&gt;，bool 类型，作为 Cluster 配置时有效，表示是否要忽略 Server 端的证书校验。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cipher_suites&lt;/code&gt;，如果配置了该配置，那么 TLS 连接将只支持配置了的密码套件，并且会按照配置的顺序作为优先级使用，支持的套件类型如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ECDHE-ECDSA-AES256-GCM-SHA384
ECDHE-RSA-AES256-GCM-SHA384
ECDHE-ECDSA-AES128-GCM-SHA256
ECDHE-RSA-AES128-GCM-SHA256
ECDHE-ECDSA-WITH-CHACHA20-POLY1305
ECDHE-RSA-WITH-CHACHA20-POLY1305
ECDHE-RSA-AES256-CBC-SHA
ECDHE-RSA-AES128-CBC-SHA
ECDHE-ECDSA-AES256-CBC-SHA
ECDHE-ECDSA-AES128-CBC-SHA
RSA-AES256-CBC-SHA
RSA-AES128-CBC-SHA
ECDHE-RSA-3DES-EDE-CBC-SHA
RSA-3DES-EDE-CBC-SHA
ECDHE-RSA-SM4-SM3
ECDHE-ECDSA-SM4-SM3
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ecdh_curves&lt;/code&gt;，如果配置了该配置，那么 TLS 连接将只支持配置了的曲线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 x25519、p256、p384、p521。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;min_version&lt;/code&gt;，最低的 TLS 协议版本，默认是 TLS1.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 TLS1.0、TLS1.1、TLS1.2。&lt;/li&gt;
&lt;li&gt;默认会自动识别可用的 TLS 协议版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max_version&lt;/code&gt;，最高的 TLS 协议版本，默认是 TLS1.2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 TLS1.0、TLS1.1、TLS1.2。&lt;/li&gt;
&lt;li&gt;默认会自动识别可用的 TLS 协议版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;alpn&lt;/code&gt;，TLS 的 ALPN 配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 h2、http/1.1、 sofa。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fall_back&lt;/code&gt;，bool类型，当配置为 true 时，如果证书解析失败，不会报错而是相当于没有开启 TLS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;extend_verify&lt;/code&gt;，任意 json 类型，当 type 为非空时，作为扩展的配置参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sds_source&lt;/code&gt;，访问 SDS API 的配置，如果配置了这个配置，&lt;code&gt;ca_cert&lt;/code&gt;、&lt;code&gt;cert_chain&lt;/code&gt; 和 &lt;code&gt;private_key&lt;/code&gt; 都会被忽略，但是其余的配置依然有效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sds_source&#34;&gt;sds_source&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;CertificateConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ValidationConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CertificateConfig&lt;/code&gt; 描述了如何获取 cert_chain 和 private_key 的配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValidationConfig&lt;/code&gt; 描述了如何获取 &lt;code&gt;ca_cert&lt;/code&gt; 的配置。&lt;/li&gt;
&lt;li&gt;详细的 Config 内容参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto#envoy-api-msg-auth-sdssecretconfig&#34;&gt;envoy: sdssecretconfig&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 运维 API</title>
      <link>https://mosn.io/docs/developer-guide/operations-api/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/developer-guide/operations-api/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Featuregate 介绍</title>
      <link>https://mosn.io/docs/developer-guide/featuregate-introduce/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/developer-guide/featuregate-introduce/</guid>
      <description>
        
        
        &lt;h2 id=&#34;featuregate-介绍&#34;&gt;Featuregate 介绍&lt;/h2&gt;
&lt;p&gt;在 MOSN 中，存在一些功能需要在启动时决定是否开启的，为了满足这种需求，MOSN 推出了 featuregate（功能开关）的能力。&lt;/p&gt;
&lt;p&gt;Featuregate 描述了一组 MOSN 中需要开启 / 关闭的 feature 状态，每个 feature 都有自己默认的状态，每个 MOSN 版本支持的 feature、feature 默认的版本都有所不同；featuregate 的描述用一个字符串表示，按照&lt;code&gt;${feature}=${bool}&lt;/code&gt;的方式，用逗号进行分割：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 通用模版
./mosn start -c ${config path} -f ${feature gates description}
// 示例
./mosn start -c mosn_config.json -f &amp;quot;auto_config=true,XdsMtlsEnable=true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Featuregate 不仅仅是提供了一种功能切换的能力，同时也提供了一种可扩展的开发机制，基于 MOSN 进行二次开发时，可以使用 featuregate 做到如下的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能切换的能力，可以控制某个 feature 的开启 / 关闭&lt;/li&gt;
&lt;li&gt;feature 之间的依赖关系管理，包括 feature 之间的启动顺序依赖、开启 / 关闭状态的依赖等
&lt;ul&gt;
&lt;li&gt;举例说明，基于 MOSN 实现两个 feature，分别为 A 和 B，需要在 A 初始化完成以后，B 会使用 A 初始化的结果进行初始化，这就是 B 依赖 A，当 feature A 处于 Disable 状态时，B 显然也会处于 Disable 或者需要作出对应的“降级”； feature gate 框架提供了一种简单的方式，可以更加专注于 feature 的开发，而不用去管理对应的启动与依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 featuregate 的框架，在 MOSN 中进行不同 feature 的二次开发，是 featuregate 框架最主要的目的。&lt;/p&gt;
&lt;h2 id=&#34;基于-featuregate-进行开发&#34;&gt;基于 featuregate 进行开发&lt;/h2&gt;
&lt;h3 id=&#34;featuregate-实现&#34;&gt;Featuregate 实现&lt;/h3&gt;
&lt;p&gt;首先，我们来看一下，featuregate 框架提供了哪些接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 返回一个 Feature 当前的状态，true 表示 enable，false 表示 disable
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// “订阅”一个 Feature，并且返回其订阅完成以后的状态。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 当订阅的 Feature 初始化完成以后，会返回其是否 Enable。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 如果订阅的 Feature 是 Disable 的，会直接返回 false；如果在订阅的 timeout 期间，Feature 依然没有
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 初始化完成，那么会返回订阅超时的错误，如果 timeout 小于等于 0，则没有订阅超时
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 feature gates 的状态，value 为一个完整的 feature gates 描述
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 feature gates 的状态，其中 map 的 key 为 feature 的 key，value 是期望设置的 feature 状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetFromMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 新注册一个 feature 到 feature gate 中
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置一个 feature 的状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetFeatureState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;enable&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 开启初始化 feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StartInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 等待所有的 feature 初始化结束
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;WaitInitFinsh&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这其中，StartInit 和 WaitInitFinsh 是由 MOSN 框架进行调用，基于 MOSN 进行二次开发时无须关注和调用；通常情况下，Set 和 SetFromMap 也无须关注。所有的上述接口，都是由框架下默认的一个不可导出的全局 featuregate 对象暴露，在没有极为特殊需求的场景下（如编写单元测试），不需要额外生成 FeatureGate 对象，使用默认的即可。&lt;/p&gt;
&lt;p&gt;接下来，我们看一下 featuregate 的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;knownFeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;once&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Once&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureGate&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// lock guards writes to known, enabled, and reads/writes of closed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;lock&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Mutex&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;known&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;knownFeatureSpec&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// inited is set to true when StartInit is called.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;inited&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;wg&lt;/span&gt;     &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WaitGroup&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;once&lt;/span&gt;   &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Once&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Featuregate 包含了一个 map，用于记录所有被支持的 feature；一个&lt;code&gt;inited&lt;/code&gt;状态标，表示 featuregate 是否已经完成了初始化；&lt;code&gt;once&lt;/code&gt;用于确保 featuregate 的初始化只执行一次，&lt;code&gt;WaitGroup&lt;/code&gt;则用于同步 feature 初始化的结果；一个&lt;code&gt;Mutex&lt;/code&gt;用于并发保护。
按照 featuregate 的设计，不同的 feature 是可以通过&lt;code&gt;Add&lt;/code&gt;的方式新增，以及不同的&lt;code&gt;Set&lt;/code&gt;方法改变状态的，而不同 feature 的初始化&lt;code&gt;Init&lt;/code&gt;函数都会统一执行，因此一旦执行完&lt;code&gt;Init&lt;/code&gt;，则不再允许新增 feature、修改 feature 状态；因此我们需要一个&lt;code&gt;inited&lt;/code&gt;的标记来记录这个行为。
&lt;code&gt;knownFeatureSpec&lt;/code&gt;是一个不可导出的结构体，用于对表示不同 feature 的&lt;code&gt;FeatureSpec&lt;/code&gt;封装，其中的&lt;code&gt;once&lt;/code&gt;和&lt;code&gt;channel&lt;/code&gt;均是用于 featuregate 中订阅和初始化使用，在此不做详细说明。
下面，我们来看一下&lt;code&gt;FeatureSpec&lt;/code&gt;的定义，这也是我们基于 featuregate 框架进行开发的核心数据结构。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Values for PreRelease.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Alpha&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ALPHA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;Beta&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;BETA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;GA&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Default is the default enablement state for the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Default&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LockToDefault indicates that the feature is locked to its default and cannot be changed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;LockToDefault&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// SetState sets the enablement state for the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;SetState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enable&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// State indicates the feature enablement
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// InitFunc used to init process when StartInit is invoked
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// PreRelease indicates the maturity level of the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;PreRelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prerelease&lt;/code&gt; 是不可导出的定义，有三个约定的导出变量可以使用，相当于传统语言的 Enum 类型，用于描述 feature 的信息，没有明确的作用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FeatureSpec&lt;/code&gt;可以自行实现，同时多数情况下可以用框架实现的&lt;code&gt;BaseFeatureSpec&lt;/code&gt;，或者基于&lt;code&gt;BaseFeatureSpec&lt;/code&gt;进行封装；如注释描述，通常情况下只需要额外封装实现一个&lt;code&gt;InitFunc&lt;/code&gt;函数即可&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// BaseFeatureSpec is a basic implementation of FeatureSpec.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Usually, a feature spec just need an init func.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 默认状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 是否可修改状态，如果为 true，说明这个 feature 只能保持默认状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 一般情况下设置这个为 true 的时候，default 也是 true
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 这种 feature 主要会用于做为其他 feature 的“基础依赖”
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;IsLockedDefault&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;PreReleaseValue&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;stateValue&lt;/span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// stateValue shoule be setted by SetState
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;inited&lt;/span&gt;          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int32&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// inited cannot be setted
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;featuregate-的使用&#34;&gt;Featuregate 的使用&lt;/h3&gt;
&lt;p&gt;了解了 featuregate 的基本实现，就可以考虑使用 featuregate 进行基本的编程扩展了。下面会介绍几种 featuregate 的使用场景，以及如何编写 feature。&lt;/p&gt;
&lt;h4 id=&#34;1-基本的全局开关&#34;&gt;1. 基本的“全局”开关&lt;/h4&gt;
&lt;p&gt;对于 feature 切换最基本的使用场景，就是使用一个类似“全局变量”进行控制，通过&lt;code&gt;if&lt;/code&gt;条件判断执行不同的逻辑。使用 featuregate 框架实现这种能力，可以把控制 feature 切换的参数全部统一到启动参数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;simple_feature&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;myfunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-需要进行初始化操作&#34;&gt;2. 需要进行“初始化”操作&lt;/h4&gt;
&lt;p&gt;通过封装扩展 InitFunc 函数，让相关的初始化工作在 MOSN 启动时统一完成，如果 feature 处于 disable 状态，那么 InitFunc 不会执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;init_feature&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyFeature&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MyFeature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;doInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 其他的类似 1.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-feature-之间存在依赖关系&#34;&gt;3. Feature 之间存在依赖关系&lt;/h4&gt;
&lt;p&gt;这个功能是 featuregate 框架提供的最重要的能力，可以方便的解决下面的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设我们存在四个独立的组件（feature），分别是 A、B、C，D&lt;/li&gt;
&lt;li&gt;B 和 C 的启动都依赖于 A，即首先要 A 启动完成，然后 B 和 C 才能启动完成；D 依赖于 B，必须 B 启动完成，D 才可以启动&lt;/li&gt;
&lt;li&gt;如果 A 没有启动，B 就不能启动，而 C 存在一种降级方案，依然可以继续工作&lt;/li&gt;
&lt;li&gt;四个 feature 在 featuregate 框架下可各自实现，如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureB&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FB&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 如果 FeatureA 没有开启，则 FeatureB 也不开启
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureC&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int32&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 降级模式
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 正常模式
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureD&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 不超时，一定要等待 B 结束
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;h4 id=&#34;为什么不使用配置的方式而要使用-featuregate&#34;&gt;为什么不使用配置的方式，而要使用 featuregate?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;配置文件需要进行解析，featuregate 更有利于扩展能力的实现&lt;/li&gt;
&lt;li&gt;有的 feature 需要判断的时机，比配置文件解析要早，甚至可能影响配置解析的逻辑&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 贡献流程</title>
      <link>https://mosn.io/docs/open-source/contribution-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/open-source/contribution-process/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 多语言</title>
      <link>https://mosn.io/docs/user-guide/multilingual/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/user-guide/multilingual/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 参考手册/FAQ</title>
      <link>https://mosn.io/docs/user-guide/manual-faq/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/user-guide/manual-faq/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.3.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.3.0/</link>
      <pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.3.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.3.0&#34;&gt;MOSN v1.3.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v130&#34;&gt;v1.3.0&lt;/h2&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迁移合并 Proxy-Wasm 的实现，并默认启用 wazero (#2172) &lt;a href=&#34;https://github.com/codefromthecrypt&#34;&gt;@Crypt Keeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化解析 xDS 透明代理配置：增加对未识别地址的透传配置 (#2171) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 CI 测试中 golangci 执行流程 (#2166) &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt; (#2167) &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为 Proxy-Wasm 添加集成基准测试 (#2164) &lt;a href=&#34;https://github.com/codefromthecrypt&#34;&gt;@Crypt Keeper&lt;/a&gt; (#2169) &lt;a href=&#34;https://github.com/codefromthecrypt&#34;&gt;@Crypt Keeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;升级 MOSN 支持的 Go 的最低版本至 1.17 (#2160) &lt;a href=&#34;https://github.com/codefromthecrypt&#34;&gt;@Crypt Keeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;改正 README.md 中的一些问题 (#2161) &lt;a href=&#34;https://github.com/liaolinrong&#34;&gt;@liaolinrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增基准测试 (#2173) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;subsetLoadBalancer 重用子集条目以优化分配/使用内存 (#2119) &lt;a href=&#34;https://github.com/dzdx&#34;&gt;@dzdx&lt;/a&gt; (#2188) &lt;a href=&#34;https://github.com/chuailiwu&#34;&gt;@liwu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 connpool_binging 在连接 upstream timeout 时出现的 panic 问题 (#2180) &lt;a href=&#34;https://github.com/EraserTime&#34;&gt;@EraserTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 cluster LB 算法为 LB_ORIGINAL_DST 时 retryTime 是 0 的问题 (#2170) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复平滑升级失败 (#2129) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-Huang&lt;/a&gt; (#2193) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改解析 xDS Listener 日志的方式 (#2182) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复示例代码打印错误 (#2190) &lt;a href=&#34;https://github.com/liaolinrong&#34;&gt;@liaolinrong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.2.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.2.0/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.2.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.2.0&#34;&gt;MOSN v1.2.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v120&#34;&gt;v1.2.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持配置 HTTP 重试状态码 (#2097) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 dev 容器构建配置与说明 (#2108) &lt;a href=&#34;https://github.com/keqingyuan&#34;&gt;@keqingyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 connpool_binding GoAway (#2115) &lt;a href=&#34;https://github.com/EraserTime&#34;&gt;@EraserTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持配置 listener 默认读缓存大小 (#2133) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 proxy-wasm v2 ABI (#2089) &lt;a href=&#34;https://github.com/lawrshen&#34;&gt;@lawrshen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持基于 iptables tproxy 的透明代理 (#2142) &lt;a href=&#34;https://github.com/3062&#34;&gt;@3062&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;删除 MOSN 扩展的 context 框架，使用变量机制代替。将 MOSN 中的变量机制(variable)和内存复用框架(buffer)迁移到 mosn.io/pkg 中 (#2055) &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;迁移 metrics 接口到 mosn.io/api 中 (#2124) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复部分日志参数缺失 (#2141) &lt;a href=&#34;https://github.com/lawrshen&#34;&gt;@lawrshen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过 error 判断获取的 cookie 是否存在 (#2136) &lt;a href=&#34;https://github.com/greedying&#34;&gt;@greedying&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.1.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.1.0/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.1.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.1.0&#34;&gt;MOSN v1.1.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v110&#34;&gt;v1.1.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TraceLog 支持 zipkin (#2014) &lt;a href=&#34;https://github.com/fibbery&#34;&gt;@fibbery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持云边互联 (#1640) &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;，细节可以参考&lt;a href=&#34;https://mosn.io/blog/posts/mosn-tunnel/&#34;&gt;博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trace 以 Driver 的形式支持插件化扩展，使用 Skywalking 作为跟踪实现 (#2047) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xDS 支持 stream filter 解析扩展 (#2095) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;stream filter: ipaccess 扩展实现 xDS 解析逻辑 (#2095) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MakeFile 添加打包 tar 命令 (#1968) &lt;a href=&#34;https://github.com/doujiang24&#34;&gt;@doujiang24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变更&#34;&gt;变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调整连接读超时从 buffer.ConnReadTimeout 到 types.DefaultConnReadTimeout (#2051) &lt;a href=&#34;https://github.com/fibbery&#34;&gt;@fibbery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复文档错字 (#2056) (#2057) &lt;a href=&#34;https://github.com/threestoneliu&#34;&gt;@threestoneliu&lt;/a&gt; (#2070) &lt;a href=&#34;https://github.com/chenzhiguo&#34;&gt;@chenzhiguo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新 license-checker.yml 的配置文件 (#2071) &lt;a href=&#34;https://github.com/kezhenxu94&#34;&gt;@kezhenxu94&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增遍历 SubsetLB 的接口 (#2059) (#2061) &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加 tls.Conn 的 SetConfig 接口 (#2088) &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加 xds-server 作为 MOSN 控制面的示例 (#2075) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 HTTP 请求解析失败时的错误日志 (#2085) &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt; (#2066) &lt;a href=&#34;https://github.com/fibbery&#34;&gt;@fibbery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;负载均衡在重试时跳过上一次选择的主机 (#2077) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;访问日志支持打印 traceID，connectionID 和 UpstreamConnectionID  (#2107) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重构 HostSet 的使用方式 (#2036) &lt;a href=&#34;https://github.com/dzdx&#34;&gt;@dzdx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更改连接写数据调整为只支持同步写的模式 (#2087) &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化创建 subset 负载均衡的算法，降低内存占用 (#2010) &lt;a href=&#34;https://github.com/dzdx&#34;&gt;@dzdx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持可扩展的集群更新方式操作 (#2048) &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化多证书匹配逻辑：优先匹配 servername，全部 servername 匹配不上以后才按照 ALPN 进行匹配 (#2053) &lt;a href=&#34;https://github.com/MengJiapeng&#34;&gt;@MengJiapeng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 wasm 示例中的 latest 镜像版本为固定的版本（#2033）&lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调整 MOSN 退出时日志关闭执行顺序，修复部分退出日志无法正确输出的问题 (#2034) &lt;a href=&#34;https://github.com/doujiang24&#34;&gt;@doujiang24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 OriginalDst 匹配成功以后没有正确处理的问题 (#2058) &lt;a href=&#34;https://github.com/threestoneliu&#34;&gt;@threestoneliu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复协议转换场景没有正确处理异常情况的问题，新增协议转换实现规范 (#2062) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 stream proxy 没有正确处理连接写超时/断开等异常事件 (#2080) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复连接事件监听时机错误可能引发的 panic 问题 (#2082) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;避免在事件监听连接之前发生关闭事件 (#2098) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP1/HTTP2 协议在处理时在上下文中保存协议信息 (#2035) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@yidwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 xDS 推送时可能存在的并发问题 (#2101) &lt;a href=&#34;https://github.com/yzj0911&#34;&gt;@yzj0911&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;找不到 upstream 地址变量时，不再返回空，返回 ValidNotFound (#2049) &lt;a href=&#34;https://github.com/songzhibin97&#34;&gt;@songzhibin97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复健康检查不支持 xDS (#2084) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修正判断上游地址方法 (#2093) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.26.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.26.0/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.26.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.26.0&#34;&gt;MOSN v0.26.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0260&#34;&gt;v0.26.0&lt;/h2&gt;
&lt;h3 id=&#34;不兼容变更&#34;&gt;不兼容变更&lt;/h3&gt;
&lt;p&gt;为了更自然的添加扩展协议，新版对 XProtocol 进行了重构，XProtocol 不再是一种协议，而是便于协议扩展实现的框架。
扩展协议的实现需要一些调整，具体请见 &lt;a href=&#34;https://github.com/mosn/mosn/blob/v0.26.0/reports/xprotocol_0.26.0.md&#34;&gt;XProtocol协议改造适配指南&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增 ip_access filter，基于来源 IP 的 ACL 控制器 (#1797) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;允许 Admin Api 扩展验证方法 (#1834) &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;transcoder filter：支持通过配置指定阶段，取代固定的阶段 (#1815) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为 tls connection 增加 SetConnectionState 方法，在 pkg/mtls/crypto/tls.Conn 中 (#1804) &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;增加了 after-start 和 after-stop 这两个新的执行阶段，并允许在这两个阶段注册处理函数 &lt;a href=&#34;https://github.com/doujiang24&#34;&gt;@doujiang24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 uds_dir 配置项，用于指定 unix domain socket 的目录 (#1829) &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持go plugin加载协议转化插件，并支持动态选择协议转换插件 &lt;a href=&#34;https://github.com/Tanc010&#34;&gt;@Tanc010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;增加更多的 HTTP 协议方法，使动态协议匹配更加精准 (#1870) &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持动态设置上游协议 (#1808) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持动态设置 HTTP 默认最大值配置 #1886 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变更&#34;&gt;变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将 HTTP 协议的默认最大请求头大小调整到 8KB (#1837) &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;重构默认的 HTTP1 和 HTTP2 的协议转换，删除了 proxy 中的转换，使用 transcoder filter 来代替 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;transcoder filter：使用注册转换器工厂来替代注册转换器 (#1879) &lt;a href=&#34;https://github.com/YIDWang&#34;&gt;@YIDWang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复：HTTP buffer 复用在高并发场景下可能导致 nil panic &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：response_flag 变量值获取错误 (#1814) &lt;a href=&#34;https://github.com/lemonlinger&#34;&gt;@lemonlinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：prefix_write 在 &amp;ldquo;/&amp;rdquo; 的场景下不能正常工作 &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：在热升级过程中，手动 kill 老的 MOSN，可能会导致新 MOSN 的 reconfig.sock 会被错误的删除 (#1820) &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：请求上游失败时，在 doretry 中不应该直接设置 setupRetry (#1807) &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：热升级中继承了老 MOSN 的配置之后，应该将配置设置到新的 MOSN 结构体中 &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：当取消客户端的 grpc 的时候，没有发送 resetStreamFrame 到上游，使得 server 端没有及时结束 &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：应该在关闭 stream connection 之前设置 resetReason，否则可能导致获取不到真实的原因 (#1828) &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：当有多个匹配的 listener 的时候，应该选择最优的匹配的 listener，否则可能导致 400 错误 &lt;a href=&#34;https://github.com/MengJiapeng&#34;&gt;@MengJiapeng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：HTTP2 协议处理 broadcast 可能导致 map 并发读写 panic &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：XProtocol 连接池(binding connpool) 中的内存泄漏 (#1821) &lt;a href=&#34;https://github.com/Dennis8274&#34;&gt;@Dennis8274&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：应该将 close logger 放在最后，否则在关闭 MOSN 实例过程中将没有日志输出 (#1845) &lt;a href=&#34;https://github.com/doujiang24&#34;&gt;@doujiang24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：XProtocol PingPong 类型连接超时的时候，因为 codecClient 没有初始化，会导致 panic (#1849) &lt;a href=&#34;https://github.com/cuiweixie&#34;&gt;@cuiweixie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：当 unhealthyThreshold 是一个空值时，健康检查将不会工作，修改为空值时使用默认值 (#1853) &lt;a href=&#34;https://github.com/Bryce-huang&#34;&gt;@Bryce-huang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：WRR 负载均衡算法可能导致死循环（发生在 unweightChooseHost）#1860 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：direct response 中 hijack 不应该再执行转换 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：当一个不健康的 host 有很高的权重时，EDF wrr 将不再选择其他健康的 host &lt;a href=&#34;https://github.com/lemonlinger&#34;&gt;@lemonlinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：Istio LDS 中的 CACert 文件名获取错误，导致 MOSN listen 失败，不会接受请求 (#1893). &lt;a href=&#34;https://github.com/doujiang24&#34;&gt;@doujiang24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复：DNS 解析 STRICT_DNS_CLUSTER 中 host 的 goroutine 没法停止 #1894 &lt;a href=&#34;https://github.com/bincherry&#34;&gt;@bincherry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.25.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.25.0/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.25.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.25.0&#34;&gt;MOSN v0.25.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0250&#34;&gt;v0.25.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;路由支持删除请求头指定字段的配置 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WASM 支持 Reload &lt;a href=&#34;https://github.com/zu1k&#34;&gt;@zu1k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;集成 SEATA TCC 模式，支持 HTTP 协议 [@dk-lockdown]((&lt;a href=&#34;https://github.com/dk-lockdown&#34;&gt;https://github.com/dk-lockdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;新增 boltv2 协议的 tracelog 支持 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gRPC 框架新增 Metrics 统计相关 Filter 扩展 &lt;a href=&#34;https://github.com/wenxuwan&#34;&gt;@wenxuwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 xds cluster 解析支持 DNS 相关字段 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MOSN 核心代码和 Istio 引入相关 xDS 代码解耦合 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新 proxy-wasm-go-host 版本 &lt;a href=&#34;https://github.com/zhenjunMa&#34;&gt;@zhenjunMa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 networkfilter 配置解析逻辑，支持更新添加接口、查询接口 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Makefile 中执行模式使用&lt;code&gt;mod vendor&lt;/code&gt;代替&lt;code&gt;GO111MODULE=off&lt;/code&gt; &lt;a href=&#34;https://github.com/scaat&#34;&gt;@scaat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转移部分 archived 到 mosn.io/pkg 路径下 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 EDF 负载均衡：在首次选择时的机器进行随机选择 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提升 EDF 负载均衡函数的性能 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调整 boltv2 心跳请求和心跳响应的处理 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 HTTP2 在 Stream 模式下的重试处理和 Unary 请求优化 &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当通过环境变量设置 GOMAXPROCS 时，无视 CPU 数量的限制 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 subset 创建时的内存使用 &lt;a href=&#34;https://github.com/dzdx&#34;&gt;@dzdx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 gRPC 框架，支持不同的 Listener 可以支持同名 Server 独立运行 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复重试时如果返回的机器地址为空会导致卡死的问题 &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复消息连接池处理连接事件的 BUG &lt;a href=&#34;https://github.com/RayneHwang&#34;&gt;@RayneHwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复没有初始化 Trace Driver 时调用 Enable Trace 导致的 panic 问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 boltv2 协议在构造异常响应时数据错误的问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP2 连接失败时异常处理的问题 &lt;a href=&#34;https://github.com/XIEZHENGYAO&#34;&gt;@XIEZHENGYAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;typo 错误修复 &lt;a href=&#34;https://github.com/jxd134&#34;&gt;@jxd134&lt;/a&gt; &lt;a href=&#34;https://github.com/yannsun&#34;&gt;@yannsun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 &lt;code&gt;RequestInfo&lt;/code&gt; 输出 &lt;code&gt;ResponseFlag&lt;/code&gt; 的错误 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 bolt/boltv2 协议编码时，在空数据时没有重新计算长度位的问题 &lt;a href=&#34;https://github.com/hui-cha&#34;&gt;@hui-cha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.24.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.24.0/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.24.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.24.0&#34;&gt;MOSN v0.24.0&lt;/a&gt; 发布，恭喜付建豪（&lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;）成为 MOSN Committer，感谢他为 MOSN 社区所做的贡献。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0240&#34;&gt;v0.24.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持使用 jaeger 收集 OpenTracing 信息 &lt;a href=&#34;https://github.com/Magiczml&#34;&gt;@Roger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由配置新增变量配置模式，可通过修改变量的方式修改路由结果 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由 virtualhost 匹配支持端口匹配模式 &lt;a href=&#34;https://github.com/jiebinzhuang&#34;&gt;@jiebin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实现 envoy 中的 filter: &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/header_to_metadata_filter&#34;&gt;header_to_metadata&lt;/a&gt; &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 UDS 的热升级 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 subset 负载均衡逻辑，在没有元数据匹配的场景下使用全量机器列表进行负载均衡 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MOSN 的 gRPC 框架支持优雅关闭 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化 Cluster 配置更新时的健康检查更新模式 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;api.Connection 新增 OnConnectionEvent 接口 &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;权重轮询负载均衡兜底策略调整为普通轮询负载均衡 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 MOSN 变量模块中增加 interface 值类型 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Subset 判断机器个数与是否存在时，同样遵循兜底策略 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dubbo stream filter 支持协议自动识别 &lt;a href=&#34;https://github.com/Thiswang&#34;&gt;@Thiswang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复轮询负载均衡在并发情况下结果异常 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 unix 地址解析异常 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP1 短连接无法生效的异常 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复国密 TLS SM3 套件在连接断开后存在的内存泄漏 &lt;a href=&#34;https://github.com/william-zk&#34;&gt;@ZengKe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当连接被对端重置或管道断裂时 HTTP2 支持重试 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复从连接池中获取到的 host 信息错误 &lt;a href=&#34;https://github.com/Sharember&#34;&gt;@Sharember&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复在 route 模块中选择权重集群的数据竞争 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果 host 不健康时，在Edf负载均衡算法中不能正确返回 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 XProtocol 路由配置超时无效的问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.23.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.23.0/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.23.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.23.0&#34;&gt;MOSN v0.23.0&lt;/a&gt; 发布&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0230&#34;&gt;v0.23.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增 networkfilter:grpc，支持通过 networkfilter 扩展方式在 MOSN 中实现可复用 MOSN 其他能力的 grpc server &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt; &lt;a href=&#34;https://github.com/zhenjunMa&#34;&gt;@zhenjunMa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamFilterChain 新增遍历调用的扩展接口 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bolt 协议新增 HTTP 403 状态码的映射 &lt;a href=&#34;https://github.com/pxzero&#34;&gt;@pxzero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增主动关闭 upstream 连接的能力 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;networkfilter 配置解析能力优化 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;proxy 配置解析支持按照协议扩展，配置解析时机优化 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TLS 连接新增证书缓存，减少重复证书的内存占用 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 Quick Start Sample &lt;a href=&#34;https://github.com/nobodyiam&#34;&gt;@nobodyiam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化默认路由处理时的 context 对象生成 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 Subset LoadBalancer 的创建函数接口 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增使用 so plugin 扩展方式接入协议扩展的示例 &lt;a href=&#34;https://github.com/yichouchou&#34;&gt;@yichouchou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 makefile 中获取 GOPATH 环境变量的方式 &lt;a href=&#34;https://github.com/bincherry&#34;&gt;@bincherry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 darwin + arrch64 架构的编译 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化日志打开方式 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP1 修复 URL 处理编码问题 &lt;a href=&#34;https://github.com/morefreeze&#34;&gt;@morefreeze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP1 修复 URL 处理大小写敏感错误问题 &lt;a href=&#34;https://github.com/GLYASAI&#34;&gt;@GLYASAI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TLS 修复 SM4 套件异常处理时存在的内存泄漏问题 &lt;a href=&#34;https://github.com/william-zk&#34;&gt;@william-zk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.22.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.22.0/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.22.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.22.0&#34;&gt;MOSN v0.22.0&lt;/a&gt; 发布&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0220&#34;&gt;v0.22.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增 Wasm 扩展框架 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XProtocol 协议新增 x-bolt 子协议，支持基于 Wasm 的协议编解码能力 &lt;a href=&#34;https://github.com/zonghaishang&#34;&gt;@zonghaishang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持自动协议识别失败时根据 SO_ORIGINAL_DST 进行自动转发报文的能力 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XProtocol 支持 Go Plugin 模式扩展 &lt;a href=&#34;https://github.com/fdingiit&#34;&gt;@fdingiit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增网络扩展层 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 Istio xDS v3 API &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt; 所属分支: &lt;a href=&#34;https://github.com/mosn/mosn/tree/istio-1.7.7&#34;&gt;istio-1.7.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去除 StreamFilter 配置解析中多余的路径清洗 &lt;a href=&#34;https://github.com/eliasyaoyc&#34;&gt;@eliasyaoyc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持为 StreamFilterChain 设置统一的回调接口 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FeatureGate 支持不同启动阶段执行, 去除 FeatureGate 状态判断的全局锁 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Http2 模块新增对 trace 能力的支持 &lt;a href=&#34;https://github.com/OrezzerO&#34;&gt;@OrezzerO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增 StageManager，将 MOSN 启动流程划分为四个可自定义的阶段 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;统一 XProtocol 模块的类型定义，移动至 mosn.io/api 包 &lt;a href=&#34;https://github.com/fdingiit&#34;&gt;@fdingiit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XProtocol 接口新增 GetTimeout 方法，取代原有的变量获取方式 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug修复&#34;&gt;Bug修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 Proxy 中请求信息的并发冲突问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 URL 处理时的安全漏洞 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复配置持久化时 Router 配置的并发冲突问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.21.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.21.0/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.21.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.21.0&#34;&gt;MOSN v0.21.0&lt;/a&gt; 发布，恭喜郑泽超（&lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;）成为 MOSN Committer，感谢他为 MOSN 社区所做的贡献。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0210&#34;&gt;v0.21.0&lt;/h2&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;升级sentinel版本到v1.0.2 &lt;a href=&#34;https://github.com/ansiz&#34;&gt;@ansiz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;读超时收缩tls的read buffer，降低tls内存消耗 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;增加注释，简化xprotocol协议连接池实现 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新mosn registry版本 &lt;a href=&#34;https://github.com/cadeeper&#34;&gt;@cadeeper&lt;/a&gt; &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化路由Header匹配逻辑,支持通用的RPC路由匹配 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;删除原有部分常量，新增用于描述变量机制的常量 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;限流模块重构，支持自定义回调扩展，可实现自定义的过滤条件，上下文信息修改等能力 &lt;a href=&#34;https://github.com/ansiz&#34;&gt;@ansiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug修复&#34;&gt;Bug修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复请求异常时metrics统计错误 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复http场景转发前没有对url进行转义的问题 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复HTTP协议中变量注入错误的问题, 修复HTTP2协议中不支持路由Rewrite的bug &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持Domain-Specific Language路由实现 &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamFilter支持go编写的动态链接库加载的方式 &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由配置中VirtualHost支持per_filter_config配置 &lt;a href=&#34;https://github.com/machine3&#34;&gt;@machine3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持dubbo thrift协议 &lt;a href=&#34;https://github.com/cadeeper&#34;&gt;@cadeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.20.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.20.0/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.20.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.20.0&#34;&gt;MOSN v0.20.0&lt;/a&gt; 发布，恭喜黄润豪（&lt;a href=&#34;https://github.com/GLYASAI&#34;&gt;@GLYASAI&lt;/a&gt;）成为 MOSN Committer，感谢他为 MOSN 社区所做的贡献。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0200&#34;&gt;v0.20.0&lt;/h2&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化 TCP 地址解析失败默认解析 UDS 地址的问题，地址解析前添加前缀判断 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化连接池获取的尝试间隔 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持通过全局配置关闭循环写模式 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化协议自动识别的配置示例和测试用例 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用更高效的变量机制替换请求头 &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将 WriteBufferChan 的定时器池化以降低负载 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TraceLog 中新增 MOSN 处理失败的信息 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP协议处理中，新增读完成channel &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日志轮转功能加强 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用的 Go 版本升级到 1.14.13 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将路由链扩展方式修改为路由Handler扩展方式，支持配置不同的路由Handler &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MOSN 扩展配置修改，支持按照配置顺序进行解析 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 doubbo 版本升级至 2.7.3 之后 Provider 不可用的问题 &lt;a href=&#34;https://github.com/cadeeper&#34;&gt;@cadeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 netpoll 模式下，错误将UDS连接处理成TCP连接的问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP Header 被设置为空字符串时无法正确 Get 的问题 &lt;a href=&#34;https://github.com/ianwoolf&#34;&gt;@ianwoolf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持新旧 MOSN 之间通过 UDS 转移配置，解决 MOSN 使用 XDS 获取配置无法平滑升级的问题 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;协议自动识别支持 XProtocol &lt;a href=&#34;https://github.com/cadeeper&#34;&gt;@cadeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持配置 XProtocol 的 keepalive 参数 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持更详细的用时追踪 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持度量指标懒加载的方式，以解决服务数目过多 metrics 空间占用过大的问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加设置 XProtocol 连接池大小默认值的函数 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 netpoll 模式 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持广播功能 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持从 LDS 响应中获取 tls 配置 &lt;a href=&#34;https://github.com/wZH-CN&#34;&gt;@wZH-CN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SDS 新增 ACK response &lt;a href=&#34;https://github.com/wZH-CN&#34;&gt;@wZH-CN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.19.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.19.0/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.19.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.19.0&#34;&gt;MOSN v0.19.0&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0190&#34;&gt;v0.19.0&lt;/h2&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用最新的 TLS 内存优化方案 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;proxy log 优化，减少内存逃逸 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;增加最大连接数限制 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AccessLog 获取变量失败时，使用”-”代替 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MaxProcs 支持配置基于 CPU 使用限制自动识别 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持指定 Istio cluster 的网络 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重构了 StreamFilter 框架，减少 streamfilter 框架与 proxy 的耦合，支持其他 network filter 可复用 stream filter 框架 &lt;a href=&#34;https://github.com/antJack&#34;&gt;@antJack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 HTTP Trace 获取 URL 错误 &lt;a href=&#34;https://github.com/wzshiming&#34;&gt;@wzshiming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 xds 配置解析时没有解析连接超时的错误 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复变量获取 Hostname 的错误 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 tcp proxy 没有正确关闭连接的错误 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 mixer filter 缺少默认配置，导致空指针问题 &lt;a href=&#34;https://github.com/glyasai&#34;&gt;@glyasai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP2 直接响应没有正确地设置 &lt;code&gt;Content-length&lt;/code&gt; 的问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 getAPISourceEndpoint 方法空指针问题 &lt;a href=&#34;https://github.com/dylandee&#34;&gt;@dylandee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Write 堆积时，过多的 Timer 申请导致内存上涨的问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Dubbo Filter 收到非法响应时，stats 统计缺失的问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.18.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.18.0/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.18.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.18.0&#34;&gt;MOSN v0.18.0&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0180&#34;&gt;v0.18.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增 MOSN 配置文件扩展机制 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 MOSN 配置工具，提升用户配置体验 &lt;a href=&#34;https://github.com/mosn/configure&#34;&gt;mosn/configure&lt;/a&gt; &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 协议 stream 处理过程中，避免多次拷贝 HTTP body &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;升级了 &lt;code&gt;github.com/TarsCloud/TarsGo&lt;/code&gt; 包到 v1.1.4 版本 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;补充了连接池的单元测试 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用内存池减少了 TLS 连接的内存占用 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;减少 xprotocol stream 处理过程的临界区大小，提升性能 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;删除 &lt;code&gt;network.NewClientConnection&lt;/code&gt; 方法冗余参数，删除 &lt;code&gt;streamConn&lt;/code&gt; 结构体 &lt;code&gt;Dispatch&lt;/code&gt; 方法 &lt;code&gt;ALPN&lt;/code&gt; 检查 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StreamReceiverFilterHandler&lt;/code&gt; 增加 &lt;code&gt;TerminateStream&lt;/code&gt; API，可在处理流的时候传入 HTTP code 异步关闭流 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;client 端 TLS handshake 失败时增加降级逻辑 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 TLS hashvalue 计算方式 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修正 disable_log admin api typo &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复执行 &lt;code&gt;go mod tidy&lt;/code&gt; 失败 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 MOSN 接收 XDS 消息大于 4M 时的 &lt;code&gt;ResourceExhausted: grpc: received message larger than max&lt;/code&gt; 错误 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复容错单元测试用例 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 &lt;code&gt;MOSNConfig.servers[].listeners[].bind_port&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 时热重启出错 &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本地写 buffer 增加超时时间，避免本地写失败导致 goroutine 过多 OOM &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 TLS 超时导致死循环 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 &lt;code&gt;dubbo.Frame&lt;/code&gt; struct 使用 &lt;code&gt;SetData&lt;/code&gt; 方法之后数据没有被修改的问题 &lt;a href=&#34;https://github.com/lxd5866&#34;&gt;@lxd5866&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.17.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.17.0/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.17.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.17.0&#34;&gt;MOSN v0.17.0&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0170&#34;&gt;v0.17.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新增最大 Header 大小限制的配置选项 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持协议实现时选择是否需要 workerpool 模式，在 workerpool 模式下，支持可配置的连接并发度
&lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Listener 配置新增对 UDS 的支持 &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加在 Dubbo 协议下通过 xDS HTTP 配置进行转换的过滤器 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化 http 场景下的 buffer 申请 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 SDS Client 使用读写锁获取 &lt;a href=&#34;https://github.com/chainhelen&#34;&gt;@chainhelen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新 hessian2 v1.7.0 库 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 NewStream 接口，从回调模式调整为同步调用的模式 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;重构 XProtocol 连接池，支持 pingpong 模式、多路复用模式与连接绑定模式 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 XProtocol 多路复用模式，支持单机 Host 连接数可配置，默认是 1 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化正则路由配置项，避免 dump 过多无用配置 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 README 蚂蚁 logo 地址失效的问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复当请求 header 太长覆盖请求内容的问题 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Dubbo 协议解析 attachment 异常的问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.16.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.16.0/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.16.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.16.0&#34;&gt;MOSN v0.16.0&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v0160&#34;&gt;v0.16.0&lt;/h2&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Logger Roller 支持自定义 Roller 的实现 &lt;a href=&#34;https://github.com/wenxuwan&#34;&gt;@wenxuwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamFilter 新增接口 SendHijackReplyWithBody &lt;a href=&#34;https://github.com/wenxuwan&#34;&gt;@wenxuwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置项新增关闭热升级选项，关闭热升级以后一个机器上可以同时存在多个不同的 MOSN 进程 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 MOSN 集成测试框架，补充单元测试 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt; &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt; &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xDS 配置解析支持 DirectResponse 的路由配置 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ClusterManager 配置新增 TLSContext &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复在热升级时 UDP 连接超时会导致死循环的 BUG &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复在 SendFilter 中执行 DirectResponse 会触发死循环的 BUG &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP2 的 Stream 计数并发统计冲突的 BUG &lt;a href=&#34;https://github.com/wenxuwan&#34;&gt;@wenxuwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 UDP 连接因读超时导致的数据丢失问题 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复触发重试时因为协议标识丢失导致无法正确记录响应 StatusCode 的 BUG &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 BoltV2 协议解析错误的 BUG &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Listener Panic 后无法自动 Restart 的 BUG &lt;a href=&#34;https://github.com/alpha-baby&#34;&gt;@alpha-baby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复变量机制中 NoCache 标签无效的 BUG &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 SDS 重连时可能存在并发冲突的 BUG &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.15.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.15.0/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.15.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.15.0&#34;&gt;MOSN v0.15.0&lt;/a&gt; 发布，恭喜邓茜（&lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;）成为 MOSN Committer，感谢她为 MOSN 社区所做的贡献。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;路由 Path Rewrite 支持按照正则表达式的方式配置 Rewrite 的内容 &lt;a href=&#34;https://github.com/liangyuanpeng&#34;&gt;@liangyuanpeng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置新增字段： 扩展配置字段，可通过扩展配置字段自定义启动配置；Dubbo 服务发现配置通过扩展的配置字段实现 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 DSL 新特性，可以方便的对请求的处理行为进行控制 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamFilter 新增流量镜像功能的扩展实现 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Listener 配置新增对 UDP 的支持 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置格式支持 Yaml 格式解析 &lt;a href=&#34;https://github.com/GLYASAI&#34;&gt;@GLYASAI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由支持 HTTP 重定向配置 &lt;a href=&#34;https://github.com/knight42&#34;&gt;@knight42&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持 istio 的 stats filter，可以根据匹配条件进行 metrics 的个性化记录 &lt;a href=&#34;https://github.com/wzshiming&#34;&gt;@wzshiming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metrics 配置支持配置 Histogram 的输出百分比 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamFilter 新增状态用于直接中止请求，并且不响应客户端 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XProtocol Hijack 响应支持携带 Body &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Skywalking 升级到 0.5.0 版本 &lt;a href=&#34;https://github.com/arugal&#34;&gt;arugal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upstream 连接 TLS 状态判断修改，支持通过 TLS 配置的 Hash 判断是否需要重新建立连接 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 DNS cache 逻辑，防止在 DNS 失效时可能引起的 DNS flood 问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复开启 TLS 加密场景下，XProtocol 协议在有多个协议的场景下判断协议错误的 BUG &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 AccessLog 中前缀匹配类型的变量不生效的 BUG &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Listener 配置解析处理不正确的 BUG &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 Router/Cluster 在文件持久化配置类型中，Name 字段包含路径分隔符时会保存失败的 BUG &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.14.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.14.0/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.14.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.14.0&#34;&gt;MOSN v0.14.0&lt;/a&gt; 发布，恭喜&lt;a href=&#34;https://github.com/trainyao&#34;&gt;姚昌宇（@trainyao）&lt;/a&gt;成为 MOSN Committer，感谢他为 MOSN 社区所做的贡献。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持 Istio 1.5.X &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt; &lt;a href=&#34;https://github.com/trainyao&#34;&gt;@trainyao&lt;/a&gt; &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;go-control-plane 升级到 0.9.4 版本&lt;/li&gt;
&lt;li&gt;xDS 支持 ACK，新增 xDS 的 Metrics&lt;/li&gt;
&lt;li&gt;支持 Istio sourceLabels 过滤功能&lt;/li&gt;
&lt;li&gt;支持 pilot-agent 的探测接口&lt;/li&gt;
&lt;li&gt;支持更多的启动参数，适配 Istio agent 启动场景&lt;/li&gt;
&lt;li&gt;gzip、strict-dns、original-dst 支持 xDS 更新&lt;/li&gt;
&lt;li&gt;移除 Xproxy 逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maglev 负载均衡算法支持 &lt;a href=&#34;https://github.com/trainyao&#34;&gt;@trainyao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增连接池实现，用于支持消息类请求 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 TLS 连接切换的 Metrics &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 HTTP StatusCode 的 Metrics &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 Metrics Admin API 输出 &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;proxy 新增查询当前请求数的接口 &lt;a href=&#34;https://github.com/zonghaishang&#34;&gt;@zonghaishang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 HostRewrite Header &lt;a href=&#34;https://github.com/liangyuanpeng&#34;&gt;@liangyuanpeng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;升级 tars 依赖，修复在高版本 Golang 下的编译问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xDS 配置解析升级适配 Istio 1.5.x &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 proxy 的日志输出 &lt;a href=&#34;https://github.com/wenxuwan&#34;&gt;@wenxuwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DNS Cache 默认时间修改为 15s &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP 参数路由匹配优化 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;升级 fasthttp 库 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 Dubbo 请求转发编码 &lt;a href=&#34;https://github.com/zonghaishang&#34;&gt;@zonghaishang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 HTTP 的请求最大 body 可配置 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 Dubbo Decode 无法解析 attachment 的 bug &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP2 连接建立之前就可能创建 stream 的 bug &lt;a href=&#34;https://github.com/dunjut&#34;&gt;@dunjut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复处理 HTTP2 处理 Trailer 空指针异常 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP 请求头默认不标准化处理的 bug &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 HTTP 请求处理时连接断开导致的 panic 异常 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 dubbo registry 的读写锁拷贝问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dubbo 集成</title>
      <link>https://mosn.io/docs/developer-guide/dubbo-integrate/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/developer-guide/dubbo-integrate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;dubbo-介绍&#34;&gt;Dubbo 介绍&lt;/h2&gt;
&lt;p&gt;Dubbo 最初是 &lt;a href=&#34;https://dubbo.apache.org/zh-cn/&#34;&gt;Java 开发的一套 RPC 框架&lt;/a&gt;，随着社区的发展。当前 dubbo 也渐渐成为一套跨语言的解决方案。除了 Java 以外，还有相应的 &lt;a href=&#34;https://github.com/apache/dubbo-go&#34;&gt;Go 实现&lt;/a&gt;。有规律的版本发布节奏，社区较为活跃。&lt;/p&gt;
&lt;h2 id=&#34;dubbo-服务-mesh-化&#34;&gt;Dubbo 服务 mesh 化&lt;/h2&gt;
&lt;p&gt;接入 service mesh 的应用，其服务发现应该由相应的 mesh 模块接管。一般由控制面将相应的服务发现配置进行订阅和下发。但这里存在几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果公司是第一次接入 service mesh，不希望一次引入太多模块，这样会增加整体的运维负担。如果可以渐进地迁移到 service mesh 架构，例如先接入数据面，再接入控制面。那么就可以随时以较低的成本进行回滚。也不会给运维造成太大的压力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个公司都有自己的发展规划，并不是每个公司都完整地拥抱了云原生。大部分公司可能存在部分上云，部分未上云的情况，在迁移到 service mesh 时，也存在部分应用接入了 service mesh，而另一部分未接入的情况。需要考虑跨架构互通。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们这里提出的方案希望能够解决这些问题。&lt;/p&gt;
&lt;h2 id=&#34;服务发现接入&#34;&gt;服务发现接入&lt;/h2&gt;
&lt;h3 id=&#34;配置工作&#34;&gt;配置工作&lt;/h3&gt;
&lt;p&gt;在配置文件中，我们配置了两个 listener：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个是 serverListener，负责拦截外部进入的流量，转发给本地模块，这个方向的请求不需要做特殊处理，只要使用 xprotocol 转发给本机即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个是 clientListener，负责拦截本机向外发起的请求，因为外部集群根据服务注册中心下发的 endpoint 列表动态变化，所以该 listener 对应的也是一个 &lt;strong&gt;特殊的 router 名 &amp;ldquo;dubbo&amp;rdquo;。&lt;/strong&gt;，这里务必注意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;listeners&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;serverListener&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;127.0.0.1:2046&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;bind_port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_chains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;server_router&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sub_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
              &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;clientListener&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.0.0.0:2045&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;bind_port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_chains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sub_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
              &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;开发工作&#34;&gt;开发工作&lt;/h3&gt;
&lt;p&gt;第一步，在 MOSN 配置中增加 &lt;code&gt;dubbo_registry&lt;/code&gt; 扩展选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;extends&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo_registry&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;enable&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_port&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20080&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;api_port&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;22222&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该配置与 tracing、admin 等为平级配置。&lt;/p&gt;
&lt;p&gt;第二步，针对接入的服务，需要简单修改 sdk 中的 pub、sub 环节代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pub 时，如果当前环境为接入 MOSN 环境(可通过配置系统下发的开关来判断)，则调用 MOSN 的 pub 接口，而非直接去注册中心 pub。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sub 时，如果当前环境为接入 MOSN 环境，则调用 MOSN 的 sub 接口，不去注册中心 sub。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三步，应用退出时，需要将所有 pub、sub 的服务执行反向操作，即 unpub、unsub。&lt;/p&gt;
&lt;p&gt;在本文中使用 &lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;httpie&lt;/a&gt; 来发送 http 请求。使用 dubbo-go 中的样例程序作为我们的服务的 client 和 server。&lt;/p&gt;
&lt;p&gt;接下来我们使用 httpie 来模拟各种情况下的 pub、sub 流程。&lt;/p&gt;
&lt;h3 id=&#34;直连-client-与正常的-dubbo-service-互通&#34;&gt;直连 client 与正常的 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/direct_client_normal_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Service 是正常的 dubbo service，所以会自动注册到 zk 中去，不需要我们帮它 pub，这里只要 sub 就可以了，所以执行流程为：&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start。&lt;/p&gt;
&lt;p&gt;第三步，start server。&lt;/p&gt;
&lt;p&gt;第四步，subscribe service。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，start client。&lt;/p&gt;
&lt;p&gt;在 client 中正确看到返回结果的话，说明请求成功了。&lt;/p&gt;
&lt;h3 id=&#34;直连-client-与直连-dubbo-service-互通&#34;&gt;直连 client 与直连 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/direct_client_direct_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直连的服务不会主动对自身进行发布，直连的 client 不会主动进行订阅。因此此例子中，pub 和 sub 都是由我们来辅助进行的。&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start&lt;/p&gt;
&lt;p&gt;第三步，start server&lt;/p&gt;
&lt;p&gt;第四步，subscribe service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，publish service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/pub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第六步，start client&lt;/p&gt;
&lt;p&gt;此时应该能看到 client 侧的响应。&lt;/p&gt;
&lt;h3 id=&#34;正常的-client-与直连-dubbo-service-互通&#34;&gt;正常的 client 与直连 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/normal_client_direct_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Client 是正常 client，因此 client 会自己去 subscribe。我们只要正常地把服务 pub 出去即可：&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start&lt;/p&gt;
&lt;p&gt;第三步，start server&lt;/p&gt;
&lt;p&gt;第四步，publish service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，start client&lt;/p&gt;
&lt;p&gt;此时应该能看到 client 侧的响应。&lt;/p&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&#34;目前还存在哪些问题么&#34;&gt;目前还存在哪些问题么？&lt;/h3&gt;
&lt;p&gt;暂时还不支持 Dubbo 的路由，未来会进行支持。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.13.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.13.0/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.13.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.13.0&#34;&gt;MOSN v0.13.0&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持 Strict DNS Cluster &lt;a href=&#34;https://github.com/dengqian&#34;&gt;@dengqian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 GZip 处理的 Stream Filter &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dubbo 服务发现完成 Beta 版本 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持单机故障隔离的 Stream Filter &lt;a href=&#34;https://github.com/NeGnail&#34;&gt;@NeGnail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;集成 Sentinel 限流能力 &lt;a href=&#34;https://github.com/ansiz&#34;&gt;@ansiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化 EDF LB 的实现，使用 EDF 重新实现 WRR LB &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置获取 ADMIN API 优化，新增 Features 和环境变量相关 ADMIN API &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新 Host 时触发健康检查的更新从异步模式修改为同步模式 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新了 Dubbo 库，优化了 Dubbo Decode 的性能 &lt;a href=&#34;https://github.com/zonghaishang&#34;&gt;@zonghaishang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 Metrics 在 Prometheus 中的输出，使用正则过滤非法的 Key &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 MOSN 的返回状态码 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复健康检查注册回调函数时的并发冲突问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复配置持久化函数没有正确处理空配置的错误 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 ClusterName/RouterName 过长时，以文件形式 DUMP 会失败的问题 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复获取 XProtocol 协议时，无法正确获取协议的问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复创建 StreamFilter 时，获取的 context 错误的问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.12.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.12.0/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.12.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.12.0&#34;&gt;MOSN v0.12.0&lt;/a&gt; 发布，感谢&lt;a href=&#34;https://github.com/peacocktrain&#34;&gt;孙福泽（@peacocktrain）&lt;/a&gt;对该版本做出的巨大贡献，经 MOSN 社区 Lead 们认证为 &lt;a href=&#34;https://github.com/mosn/community/issues/6&#34;&gt;commiter&lt;/a&gt; 🎉。&lt;/p&gt;
&lt;p&gt;以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;blog/posts/skywalking-support&#34;&gt;支持 Skywalking&lt;/a&gt; &lt;a href=&#34;https://github.com/arugal&#34;&gt;@arugal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stream Filter 新增了一个 Receive Filter 执行的阶段，可在 MOSN 路由选择完 Host 以后，再次执行 Receive Filter &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP2 支持流式 &lt;a href=&#34;https://github.com/peacocktrain&#34;&gt;@peacocktrain&lt;/a&gt; &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FeatureGate 新增接口 KnownFeatures，可输出当前 FeatureGate 状态 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提供一种协议透明的方式获取请求资源（PATH、URI、ARG），对于资源的定义由各个协议自身定义 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增负载均衡算法
&lt;ul&gt;
&lt;li&gt;支持 ActiveRequest LB &lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;@CodingSinger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 WRR LB &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XProtocol 协议引擎优化 &lt;a href=&#34;https://github.com/neverhook&#34;&gt;@neverhook&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;修改 XProtocol 心跳响应接口，支持协议的心跳响应可返回更多的信息&lt;/li&gt;
&lt;li&gt;优化 connpool 的心跳触发，只有实现了心跳的协议才会发心跳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dubbo 库依赖版本从 v1.5.0-rc1 更新到 v1.5.0 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API 调整，HostInfo 新增健康检查相关的接口 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;熔断功能实现优化 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;负责均衡选择逻辑简化，同样地址的 Host 复用相同的健康检查标记 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt; &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 HTTP 建连逻辑，提升 HTTP 建立性能 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日志轮转逻辑从写日志触发，调整为定时触发 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;typo 调整 &lt;a href=&#34;https://github.com/xujianhai666&#34;&gt;@xujianhai666&lt;/a&gt; &lt;a href=&#34;https://github.com/candyleer&#34;&gt;@candyleer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 xDS 解析故障注入配置的错误 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 MOSN HTTP HEAD 方法导致的请求 Hold 问题 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 XProtocol 引擎对于 StatusCode 映射缺失的问题 &lt;a href=&#34;https://github.com/neverhook&#34;&gt;@neverhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复 DirectReponse 触发重试的 BUG &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.11.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.11.0/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.11.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.11.0&#34;&gt;MOSN v0.11.0&lt;/a&gt; 发布。以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持 Listener Filter 的扩展，透明劫持能力基于 Listener Filter 实现 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;变量机制新增 Set 方法 &lt;a href=&#34;https://github.com/neverhook&#34;&gt;@neverhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 SDS Client 失败时自动重试和异常处理 &lt;a href=&#34;https://github.com/pxzero&#34;&gt;@pxzero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;完善 TraceLog，支持注入 context &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增 FeatureGate &lt;code&gt;auto_config&lt;/code&gt;，当开启该Feature以后动态更新的配置会保存到启动配置中 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重构 XProtocol Engine，并且重新实现了 SofaRPC 协议 &lt;a href=&#34;https://github.com/neverhook&#34;&gt;@neverhook&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;移除了 SofaRpc Healthcheck filter，改为 xprotocol 内建的 heartbeat 实现&lt;/li&gt;
&lt;li&gt;移除了 SofaRpc 协议原本的协议转换 (protocol conv) 支持，新增了基于 stream filter 的的协议转换扩展实现能力&lt;/li&gt;
&lt;li&gt;xprotocol 新增 idle free 和 keepalive&lt;/li&gt;
&lt;li&gt;协议解析优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改 HTTP2 协议的 Encode 方法参数 &lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;精简了 LDS 接口参数 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改了路由配置模型，废弃了&lt;code&gt;connection_manager&lt;/code&gt;&lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化 Upstream 动态解析域名机制 &lt;a href=&#34;https://github.com/wangfakang&#34;&gt;@wangfakang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化 TLS 封装，新增了错误日志，修改了兼容模式下的超时时间 &lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优化超时时间设置，使用变量机制设置超时时间 &lt;a href=&#34;https://github.com/neverhook&#34;&gt;@neverhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dubbo 解析库依赖升级到 1.5.0 &lt;a href=&#34;https://github.com/cch123&#34;&gt;@cch123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;引用路径迁移脚本新增 OS 自适应 &lt;a href=&#34;https://github.com/taomaree&#34;&gt;@taomaree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 HTTP2 协议转发时丢失 query string 的问题 &lt;a href=&#34;https://github.com/champly&#34;&gt;@champly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v0.10.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v0.10.0/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v0.10.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v0.10.0&#34;&gt;MOSN v0.10.0&lt;/a&gt; 发布。以下是该版本的变更日志。&lt;/p&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持多进程插件模式（&lt;a href=&#34;https://github.com/mosn/mosn/pull/979&#34;&gt;#979&lt;/a&gt;，&lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;@taoyuanyuan&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;启动参数支持 service-meta参数（&lt;a href=&#34;https://github.com/mosn/mosn/pull/952&#34;&gt;#952&lt;/a&gt;，&lt;a href=&#34;https://github.com/trainyao&#34;&gt;@trainyao&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;支持 abstract uds 模式挂载 sds socket&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分离部分 MOSN 基础库代码到 &lt;a href=&#34;https://github.com/mosn/pkg&#34;&gt;mosn.io/pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分离部分 MOSN 接口定义到 &lt;a href=&#34;https://github.com/mosn/api&#34;&gt;mosn.io/api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;日志基础模块分离到 &lt;code&gt;mosn.io/pkg&lt;/code&gt;，MOSN 的日志实现优化&lt;/li&gt;
&lt;li&gt;优化 FeatureGate（&lt;a href=&#34;https://github.com/mosn/mosn/pull/927&#34;&gt;#927&lt;/a&gt;，&lt;a href=&#34;https://github.com/nejisama&#34;&gt;@nejisama&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;新增处理获取 SDS 配置失败时的处理&lt;/li&gt;
&lt;li&gt;CDS 动态删除 Cluster时，会同步停止对应 Cluster 的健康检查&lt;/li&gt;
&lt;li&gt;SDS 触发证书更新时的回调函数新增证书配置作为参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复在 SOFARPC Oneway 请求失败时，导致的内存泄漏问题&lt;/li&gt;
&lt;li&gt;修复在收到非标准的 HTTP 响应时，返回 502 错误的问题&lt;/li&gt;
&lt;li&gt;修复 DUMP 配置时可能存在的并发冲突&lt;/li&gt;
&lt;li&gt;修复 TraceLog 统计的 Request 和 Response Size 错误问题&lt;/li&gt;
&lt;li&gt;修复因为并发写连接导致写超时失效的问题&lt;/li&gt;
&lt;li&gt;修复 serialize 序列化的 bug&lt;/li&gt;
&lt;li&gt;修复连接读取时内存复用保留 buffer 过大导致内存占用过高的问题&lt;/li&gt;
&lt;li&gt;优化 XProtocol 中 Dubbo 相关实现&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建页面</title>
      <link>https://mosn.io/docs/open-source/contributing-documents/creating-pages/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/open-source/contributing-documents/creating-pages/</guid>
      <description>
        
        
        &lt;h2 id=&#34;开始之前&#34;&gt;开始之前&lt;/h2&gt;
&lt;p&gt;在开始编写 MOSN 文档之前，首先需要你创建一个 MOSN 文档存储库，和熟悉 MOSN 的文档结构。&lt;/p&gt;
&lt;h2 id=&#34;页面类型&#34;&gt;页面类型&lt;/h2&gt;
&lt;h3 id=&#34;文档&#34;&gt;文档&lt;/h3&gt;
&lt;p&gt;系统化介绍 MOSN 使用的文档，由 MOSN 团队官方维护。&lt;/p&gt;
&lt;h3 id=&#34;博客&#34;&gt;博客&lt;/h3&gt;
&lt;p&gt;周期化发布的 MOSN 博客，来自社区贡献。&lt;/p&gt;
&lt;h3 id=&#34;新闻&#34;&gt;新闻&lt;/h3&gt;
&lt;p&gt;关于 MOSN 社区的新闻信息。&lt;/p&gt;
&lt;h3 id=&#34;发布&#34;&gt;发布&lt;/h3&gt;
&lt;p&gt;MOSN 的新版本发布信息。&lt;/p&gt;
&lt;h2 id=&#34;文档结构&#34;&gt;文档结构&lt;/h2&gt;
&lt;p&gt;所有文档都位于 &lt;code&gt;content&lt;/code&gt; 目录下，&lt;code&gt;content/zh&lt;/code&gt; 为中文文档，&lt;code&gt;content/en&lt;/code&gt; 为英文文档，要想在某一层级的文档下再创建一个新的文档需要先创建一个目录，并根据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有没有子目录的文档都以 &lt;code&gt;index.md&lt;/code&gt; 命名。&lt;/li&gt;
&lt;li&gt;所有包含子目录的文档都以 &lt;code&gt;_index.md&lt;/code&gt; 命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文档元数据&#34;&gt;文档元数据&lt;/h2&gt;
&lt;p&gt;每个文档都有元数据信息，元数据信息是介于两个 YAML 块之间通过 3 个“-”分割的信息。下面就是你必须填写的元数据信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;linkTitle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2020-02-11&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;weight&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;  关于本页内容的简介。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title：即本文章的标题。&lt;/li&gt;
&lt;li&gt;linkTitle：显示在侧边栏的文档标题，一般写成跟 &lt;code&gt;title&lt;/code&gt; 的内容一致即可。&lt;/li&gt;
&lt;li&gt;date：该文档的创作日期，格式为 &lt;code&gt;YYYY-MM-dd&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;weight：在同一文档层级，weight 数字越小的文档在侧边栏中显示约靠前，对于非 &lt;code&gt;docs&lt;/code&gt; 目录下的文章不需要设置。&lt;/li&gt;
&lt;li&gt;description：对本文档的简介。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于博客、发布、新闻文档，还需要填写作者信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;作者信息&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：作者信息的值支持 Markdown。&lt;/p&gt;
&lt;h2 id=&#34;文档命名&#34;&gt;文档命名&lt;/h2&gt;
&lt;p&gt;文档的 URL 是根据该篇文档所在的目录层级而确定的，文档的目录名称规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用英文单词命名&lt;/li&gt;
&lt;li&gt;不同的单词间使用连字符连接&lt;/li&gt;
&lt;li&gt;不得出现其他标点符号&lt;/li&gt;
&lt;li&gt;名称尽量简短&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 文档贡献指南</title>
      <link>https://mosn.io/docs/open-source/contributing-documents/github/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/open-source/contributing-documents/github/</guid>
      <description>
        
        
        &lt;p&gt;要处理 MOSN 文档，您需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub 账户&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该文档是根据 &lt;a href=&#34;https://github.com/mosn/mosn.io/blob/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; 协议许可发布的。&lt;/p&gt;
&lt;h2 id=&#34;how-to&#34;&gt;如何贡献&lt;/h2&gt;
&lt;p&gt;您可以通过以下三种方式为 MOSN 文档做出贡献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果您想要编辑现有页面，可以在浏览器中打开页面，然后点击页面右侧的&lt;strong&gt;编辑本页&lt;/strong&gt;选项，这将带您到 GitHub 页面进行编辑操作并提交相应的更改。&lt;/li&gt;
&lt;li&gt;如果您想使用通用的方式，请遵循我们的&lt;a href=&#34;#add&#34;&gt;如何添加内容&lt;/a&gt;中的步骤。&lt;/li&gt;
&lt;li&gt;如果您想对现有的 pull request（PR）进行 review，请参考&lt;a href=&#34;#review&#34;&gt;如何 review&lt;/a&gt; 中的步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PR 合并后会立即显示在 &lt;a href=&#34;https://mosn.io&#34;&gt;https://mosn.io&lt;/a&gt; 上。&lt;/p&gt;
&lt;h2 id=&#34;add&#34;&gt;如何添加内容&lt;/h2&gt;
&lt;p&gt;要添加内容，您必须创建存储库的分支，并从该分支向文档主存储库提交 PR。以下步骤描述了该过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问 GitHub MOSN 官网仓库 &lt;a href=&#34;https://github.com/mosn/mosn.io&#34;&gt;https://github.com/mosn/mosn.io&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;单击屏幕右上角的 &lt;strong&gt;Fork&lt;/strong&gt; 按钮，以在您的 GitHub 帐户中创建 MOSN 官网仓库的副本。&lt;/li&gt;
&lt;li&gt;克隆您的 fork 到本地，然后进行所需的任何更改。&lt;/li&gt;
&lt;li&gt;当您准备将这些更改发送给我们时，请将更改推送到您的 fork 仓库。&lt;/li&gt;
&lt;li&gt;进入 fork 仓库的索引页面，然后单击 &lt;strong&gt;New Pull Request&lt;/strong&gt; 提交 PR。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;review&#34;&gt;如何 review&lt;/h2&gt;
&lt;p&gt;请直接在 PR 上发表评论。如果您评论的内容很详细，请按照以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 PR 中评论具体信息。如果可以的话，请在受影响的文件和文件行上直接评论特定的具体信息。&lt;/li&gt;
&lt;li&gt;适当的时候，在评论中向 PR 提交者与参与者提供建议。&lt;/li&gt;
&lt;li&gt;发布您的评论，与 PR 参与者分享您的评论和建议。&lt;/li&gt;
&lt;li&gt;发布评论后，大家经过讨论一致同意合并 PR。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;preview&#34;&gt;如何预览&lt;/h2&gt;
&lt;p&gt;您可以根据需要，选择在线预览，或者在本地使用 Hugo 命令行运行本站实时预览。&lt;/p&gt;
&lt;h3 id=&#34;在线预览&#34;&gt;在线预览&lt;/h3&gt;
&lt;p&gt;在提交 PR 后，GitHub 上对应的 PR 页面会显示一系列检查选项，其中 &lt;code&gt;deploy/netlify&lt;/code&gt; 选项将会生成 MOSN 官网的预览页面，点击 &lt;strong&gt;Details&lt;/strong&gt; 可以跳转到预览界面。对于同一个 PR 每次提交都会触发一次构建预览。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;website-preview.png&#34; alt=&#34;预览&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是个临时网站，可以确保本次 PR 合并后的页面显示正常。&lt;/p&gt;
&lt;h3 id=&#34;本地预览&#34;&gt;本地预览&lt;/h3&gt;
&lt;p&gt;除了在页面上预览以外，您还可以使用 &lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt;（建议使用 v0.55.5 extended 版本），在代码仓库的根目录下执行 &lt;code&gt;hugo server&lt;/code&gt;，即可在浏览器中打开 &lt;code&gt;http://localhost:1313&lt;/code&gt; 预览。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 样式指南</title>
      <link>https://mosn.io/docs/open-source/contributing-documents/style-guide/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/open-source/contributing-documents/style-guide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;格式标准&#34;&gt;格式标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必须使用 Markdown 格式编辑文档正文。&lt;/li&gt;
&lt;li&gt;文档正文标题从二级标题开始。&lt;/li&gt;
&lt;li&gt;图片使用本地图片，跟 &lt;code&gt;index.md&lt;/code&gt; 文件放在同一个目录下，使用相对位置引用。&lt;/li&gt;
&lt;li&gt;所有代码都需要指定代码语言。&lt;/li&gt;
&lt;li&gt;中英文之间要加空格，如果句子末尾是英文则不需要。&lt;/li&gt;
&lt;li&gt;请不要将有序列表和无序列表穿插混用，容易造成格式混乱。&lt;/li&gt;
&lt;li&gt;对于直接出现的 URL 链接请使用 &lt;code&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; 包裹起来。&lt;/li&gt;
&lt;li&gt;对于非通用词汇、代码中词组的引用请使用反括号包裹起来。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 0.1.0 性能报告</title>
      <link>https://mosn.io/docs/products/report/releases/mosn-0.1.0-perfermence-report/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/mosn-0.1.0-perfermence-report/</guid>
      <description>
        
        
        &lt;p&gt;以下的的性能报告为 MOSN 0.1.0 在做 Bolt 与 HTTP1.x 协议的纯 TCP 转发上与 envoy 的一些性能对比数据，主要表现在 QPS、RTT、失败率/成功率等。&lt;/p&gt;
&lt;p&gt;这里需要强调的是，为了提高 MOSN 的转发性能，在 0.1.0 版本中，我们做了如下的一些优化手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线程模型优化上，使用 worker 协程池处理 stream 事件，使用两个独立的协程分别处理读写 IO&lt;/li&gt;
&lt;li&gt;在单核转发优化上，在指定 &lt;code&gt;P=1&lt;/code&gt; 的情况下，我们通过使用 CPU 绑核的形式来提高系统调用的执行效率以及 cache 的 locality affinity&lt;/li&gt;
&lt;li&gt;在内存优化上，同样是在单核绑核的情况下，我们通过使用 SLAB-style 的回收机制来提高复用，减少内存 copy&lt;/li&gt;
&lt;li&gt;在 IO 优化上，主要是通过读写 buffer 大小以及读写时机和频率等参数的控制上进行调优&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下为具体的性能测试数据。&lt;/p&gt;
&lt;h2 id=&#34;tcp-代理性能数据&#34;&gt;TCP 代理性能数据&lt;/h2&gt;
&lt;p&gt;这里，针对相同的部署模式，我们分别针对上层协议为 &lt;code&gt;&amp;quot;Bolt(SofaRpc相关协议)&amp;quot;&lt;/code&gt; 与 &lt;code&gt;&amp;quot;HTTP1.1&amp;quot;&lt;/code&gt; 来进行对比。&lt;/p&gt;
&lt;h3 id=&#34;部署模式&#34;&gt;部署模式&lt;/h3&gt;
&lt;p&gt;压测采用纯代理模式部署，client 进程通过 MOSN 进程作为转发代理访问server进程。其中，client 进程，MOSN 进程，server 进程分别运行在属于不同网段的机器中。client 直连访问 server 网络延时为 2.5ms 左右。&lt;/p&gt;
&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;
&lt;h3 id=&#34;bolt-协议发送-1k-字符串&#34;&gt;Bolt 协议（发送 1K 字符串）&lt;/h3&gt;
&lt;p&gt;发送 Bolt 协议数据的客户端使用 &amp;ldquo;蚂蚁集团&amp;quot;内部开发的线上压力机，并部署 sofa rpc client。 通过压力机的性能页面，可反映压测过程中的QPS、成功/失败次数，以及RT等参数。&lt;/p&gt;
&lt;h3 id=&#34;http11-协议发送-1k-字符串&#34;&gt;HTTP1.1 协议（发送 1K 字符串）&lt;/h3&gt;
&lt;p&gt;使用 ApacheBench/2.3, 测试指令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ab -n &lt;span style=&#34;color:#000&#34;&gt;$RPC&lt;/span&gt; -c &lt;span style=&#34;color:#000&#34;&gt;$CPC&lt;/span&gt; -p 1k.txt -T &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt; -k http://11.166.161.136:12200/tcp_bench &amp;gt; ab.log.&lt;span style=&#34;color:#000&#34;&gt;$CPU_IDX&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;service-mesh-运行机器规格&#34;&gt;Service mesh 运行机器规格&lt;/h2&gt;
&lt;p&gt;Service mesh 运行在容器中，其中 CPU 为独占的一个逻辑核，具体规格如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2008.alios7.x86_64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz X 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;upstream-运行机器规格&#34;&gt;Upstream 运行机器规格&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;2.6.32-431.17.1.el6.FASTSOCKET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel(R) Xeon(R) CPU E5620  @ 2.40GHz X 16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;bolt-协议测试结果&#34;&gt;Bolt 协议测试结果&lt;/h2&gt;
&lt;h3 id=&#34;性能数据&#34;&gt;性能数据&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;MOSN&lt;/th&gt;
&lt;th&gt;Envoy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QPS&lt;/td&gt;
&lt;td&gt;103500&lt;/td&gt;
&lt;td&gt;104000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT&lt;/td&gt;
&lt;td&gt;16.23ms&lt;/td&gt;
&lt;td&gt;15.88ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;31m&lt;/td&gt;
&lt;td&gt;18m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;可以看到，在单核 TCP 转发场景下，MOSN 0.1.0 版本和 Envoy 1.7版本，在满负载情况下的 QPS、RTT、成功数/失败数等性能数据上相差不大，后续版本我们会继续优化。&lt;/p&gt;
&lt;h2 id=&#34;http11-测试结果&#34;&gt;HTTP/1.1 测试结果&lt;/h2&gt;
&lt;p&gt;由于 HTTP/1.1 的请求响应模型为 PING-PONG，因此 QPS 与并发数会呈现正相关。下面分别进行不同并发数的测试。&lt;/p&gt;
&lt;h3 id=&#34;并发20&#34;&gt;并发20&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;MOSN&lt;/th&gt;
&lt;th&gt;Envoy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QPS&lt;/td&gt;
&lt;td&gt;5600&lt;/td&gt;
&lt;td&gt;5600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(mean)&lt;/td&gt;
&lt;td&gt;3.549ms&lt;/td&gt;
&lt;td&gt;3.545ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P99)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P98)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P95)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;24m&lt;/td&gt;
&lt;td&gt;23m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;并发40&#34;&gt;并发40&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;MOSN&lt;/th&gt;
&lt;th&gt;Envoy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QPS&lt;/td&gt;
&lt;td&gt;11150&lt;/td&gt;
&lt;td&gt;11200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(mean)&lt;/td&gt;
&lt;td&gt;3.583ms&lt;/td&gt;
&lt;td&gt;3.565ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P99)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P98)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P95)&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;34m&lt;/td&gt;
&lt;td&gt;24m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;70%&lt;/td&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;并发200&#34;&gt;并发200&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;MOSN&lt;/th&gt;
&lt;th&gt;Envoy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QPS&lt;/td&gt;
&lt;td&gt;29670&lt;/td&gt;
&lt;td&gt;38800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(mean)&lt;/td&gt;
&lt;td&gt;5.715ms&lt;/td&gt;
&lt;td&gt;5.068ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P99)&lt;/td&gt;
&lt;td&gt;16ms&lt;/td&gt;
&lt;td&gt;7ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P98)&lt;/td&gt;
&lt;td&gt;13ms&lt;/td&gt;
&lt;td&gt;7ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P95)&lt;/td&gt;
&lt;td&gt;11ms&lt;/td&gt;
&lt;td&gt;6ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;96m&lt;/td&gt;
&lt;td&gt;24m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;95%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;并发220&#34;&gt;并发220&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;MOSN&lt;/th&gt;
&lt;th&gt;Envoy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QPS&lt;/td&gt;
&lt;td&gt;30367&lt;/td&gt;
&lt;td&gt;41070&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(mean)&lt;/td&gt;
&lt;td&gt;8.201ms&lt;/td&gt;
&lt;td&gt;5.369ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P99)&lt;/td&gt;
&lt;td&gt;20ms&lt;/td&gt;
&lt;td&gt;9ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P98)&lt;/td&gt;
&lt;td&gt;19ms&lt;/td&gt;
&lt;td&gt;8ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT(P95)&lt;/td&gt;
&lt;td&gt;16ms&lt;/td&gt;
&lt;td&gt;8ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;100m&lt;/td&gt;
&lt;td&gt;24m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;结论-1&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;可以看到，在上层协议为 HTTP/1.X 时，MOSN 的性能和 Envoy 的性能存在一定差距，对于这种现象我们的初步结论为：在 PING-PONG 的发包模型下，MOSN 无法进行 read/write 系统调用合并，相比 SOFARPC 可以合并的场景，syscall 数量大幅上升，因此导致相比 SOFARPC 的场景，HTTP 性能上相比 Envoy 会存在差距。针对这个问题，在 0.2.0 版本中，我们会进行相应的优化。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;h2 id=&#34;envoy-版本信息&#34;&gt;Envoy 版本信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;version：1.7&lt;/li&gt;
&lt;li&gt;tag：1ef23d481a4701ad4a414d1ef98036bd2ed322e7&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;envoy-tcp-测试配置&#34;&gt;Envoy TCP 测试配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static_resources&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;listeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12200&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;filter_chains&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;filters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;envoy.tcp_proxy&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;stat_prefix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ingress_tcp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sofa_server&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;clusters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sofa_server&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;connect_timeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;25s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lb_policy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;round_robin&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.210.168.5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12222&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.210.168.5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12223&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.210.168.5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12224&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.210.168.5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12225&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;admin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;access_log_path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;socket_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8001&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 0.2.1 性能报告</title>
      <link>https://mosn.io/docs/products/report/releases/mosn-0.2.1-performance-report/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/mosn-0.2.1-performance-report/</guid>
      <description>
        
        
        &lt;p&gt;在 0.2.1 版本中，我们进行了如下一些优化手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加内存复用框架，涵盖 io/protocol/stream/proxy 层级，减少对象分配、内存使用和 GC 压力。&lt;/li&gt;
&lt;li&gt;针对大量链接场景，新增 Raw Epoll 模式，该模式使用了事件回调机制 + IO 协程池，规避了海量协程带来的堆栈内存消耗以及调度开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，由于目前 SOFARPC 和 H2 的压测工具还没有 pxx 指标的展示，我们在性能报告中选取的数据都为&lt;strong&gt;均值&lt;/strong&gt;。后续需要我们自行进行相关压测环境工具的建设来完善相关指标（P99，P95……）&lt;/p&gt;
&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;p&gt;本次性能报告在&lt;code&gt;0.1.0 性能报告&lt;/code&gt;的基础上，新增了若干场景的覆盖，总体包含以下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单核性能（sidecar场景）
&lt;ul&gt;
&lt;li&gt;7层代理
&lt;ul&gt;
&lt;li&gt;Bolt（串联）&lt;/li&gt;
&lt;li&gt;Http/1.1（串联）&lt;/li&gt;
&lt;li&gt;Http/2（串联）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多核性能（gateway场景）
&lt;ul&gt;
&lt;li&gt;7层代理
&lt;ul&gt;
&lt;li&gt;Bolt（直连）&lt;/li&gt;
&lt;li&gt;Http/1.1（直连）&lt;/li&gt;
&lt;li&gt;Http/2（直连）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;长连接网关
&lt;ul&gt;
&lt;li&gt;Bolt（read/write loop with goroutine/raw epoll）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单核性能sidecar-场景&#34;&gt;单核性能（sidecar 场景）&lt;/h2&gt;
&lt;h3 id=&#34;测试环境&#34;&gt;测试环境&lt;/h3&gt;
&lt;h4 id=&#34;机器信息&#34;&gt;机器信息&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;th&gt;OS&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;11.166.190.224&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel（R） Xeon（R） CPU E5-2640 v3 @ 2.60GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11.166.136.110&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel（R） Xeon（R） CPU E5-2430 0 @ 2.20GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bolt client&lt;/td&gt;
&lt;td&gt;client 为压力平台，有 5 台压力机，共计与client MOSN 之间会建立 500 条链接&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http1 client（10.210.168.5）&lt;/td&gt;
&lt;td&gt;ApacheBench/2.3&lt;/td&gt;
&lt;td&gt;-n 2000000 -c 500 -k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http2 client（10.210.168.5）&lt;/td&gt;
&lt;td&gt;nghttp.h2load&lt;/td&gt;
&lt;td&gt;-n1000000 -c5 -m100 -t4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;部署结构&#34;&gt;部署结构&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压测模式&lt;/th&gt;
&lt;th&gt;部署结构&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;串联&lt;/td&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224） &amp;ndash;&amp;gt; MOSN（11.166.136.110） &amp;ndash;&amp;gt; server（11.166.136.110）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;网络时延&#34;&gt;网络时延&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;PING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224）&lt;/td&gt;
&lt;td&gt;1.356ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOSN（11.166.190.224） &amp;ndash;&amp;gt; MOSN（11.166.136.110）&lt;/td&gt;
&lt;td&gt;0.097 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;请求模式&#34;&gt;请求模式&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;请求内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1K req/resp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7层代理&#34;&gt;7层代理&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;QPS&lt;/th&gt;
&lt;th&gt;RT(ms)&lt;/th&gt;
&lt;th&gt;MEM(K)&lt;/th&gt;
&lt;th&gt;CPU(%)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bolt&lt;/td&gt;
&lt;td&gt;16000&lt;/td&gt;
&lt;td&gt;15.8&lt;/td&gt;
&lt;td&gt;77184&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Http/1.1&lt;/td&gt;
&lt;td&gt;4610&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;47336&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Http/2&lt;/td&gt;
&lt;td&gt;5219&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;td&gt;31244&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;多核性能gateway-场景&#34;&gt;多核性能（gateway 场景）&lt;/h2&gt;
&lt;h3 id=&#34;测试环境-1&#34;&gt;测试环境&lt;/h3&gt;
&lt;h4 id=&#34;机器信息-1&#34;&gt;机器信息&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;th&gt;OS&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;11.166.190.224&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel（R） Xeon（R） CPU E5-2640 v3 @ 2.60GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11.166.136.110&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel（R） Xeon（R） CPU E5-2430 0 @ 2.20GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bolt client&lt;/td&gt;
&lt;td&gt;client为压力平台，有5台压力机，共计与client MOSN之间会建立500条链接&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http1 client（10.210.168.5）&lt;/td&gt;
&lt;td&gt;ApacheBench/2.3&lt;/td&gt;
&lt;td&gt;-n 2000000 -c 500 -k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http2 client（10.210.168.5）&lt;/td&gt;
&lt;td&gt;nghttp.h2load&lt;/td&gt;
&lt;td&gt;-n1000000 -c5 -m100 -t4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;部署结构-1&#34;&gt;部署结构&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压测模式&lt;/th&gt;
&lt;th&gt;部署结构&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直连&lt;/td&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224） &amp;ndash;&amp;gt; server（11.166.136.110）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;网络时延-1&#34;&gt;网络时延&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;PING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224）&lt;/td&gt;
&lt;td&gt;1.356ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOSN（11.166.190.224） &amp;ndash;&amp;gt; MOSN（11.166.136.110）&lt;/td&gt;
&lt;td&gt;0.097 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;请求模式-1&#34;&gt;请求模式&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;请求内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1K req/resp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7层代理-1&#34;&gt;7层代理&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;QPS&lt;/th&gt;
&lt;th&gt;RT(ms)&lt;/th&gt;
&lt;th&gt;MEM(K)&lt;/th&gt;
&lt;th&gt;CPU(%)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bolt&lt;/td&gt;
&lt;td&gt;45000&lt;/td&gt;
&lt;td&gt;23.4&lt;/td&gt;
&lt;td&gt;544732&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Http/1.1&lt;/td&gt;
&lt;td&gt;21584&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;42768&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Http/2&lt;/td&gt;
&lt;td&gt;8180&lt;/td&gt;
&lt;td&gt;51.7&lt;/td&gt;
&lt;td&gt;173180&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;长连接网关&#34;&gt;长连接网关&lt;/h2&gt;
&lt;h3 id=&#34;测试环境-2&#34;&gt;测试环境&lt;/h3&gt;
&lt;h4 id=&#34;机器信息-2&#34;&gt;机器信息&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;th&gt;OS&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;11.166.190.224&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11.166.136.110&lt;/td&gt;
&lt;td&gt;3.10.0-327.ali2010.rc7.alios7.x86_64&lt;/td&gt;
&lt;td&gt;Intel(R) Xeon(R) CPU E5-2430 0 @ 2.20GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;部署结构-2&#34;&gt;部署结构&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压测模式&lt;/th&gt;
&lt;th&gt;部署结构&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直连&lt;/td&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224） &amp;ndash;&amp;gt; server（11.166.136.110）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;网络时延-2&#34;&gt;网络时延&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;PING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;client &amp;ndash;&amp;gt; MOSN（11.166.190.224）&lt;/td&gt;
&lt;td&gt;1.356ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOSN（11.166.190.224） &amp;ndash;&amp;gt; MOSN（11.166.136.110）&lt;/td&gt;
&lt;td&gt;0.097 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;请求模式-2&#34;&gt;请求模式&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;链接数&lt;/th&gt;
&lt;th&gt;请求内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2 台压力机，每台 5w 链接 + 500 QPS，共计10W链接 + 1000 QPS&lt;/td&gt;
&lt;td&gt;1K req/resp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;长连接网关-1&#34;&gt;长连接网关&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;QPS&lt;/th&gt;
&lt;th&gt;MEM(g)&lt;/th&gt;
&lt;th&gt;CPU(%)&lt;/th&gt;
&lt;th&gt;goroutine&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RWLoop + goroutine&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;200028&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raw epoll&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;MOSN &lt;code&gt;0.2.1&lt;/code&gt;引入了&lt;code&gt;内存复用框架&lt;/code&gt;，相比&lt;code&gt;0.1.0&lt;/code&gt;，在 &lt;code&gt;bolt 协议转发&lt;/code&gt;场景性能表现得到了大幅优化。在提升了&lt;strong&gt;20&lt;/strong&gt;% 的 QPS 的同时，还优化了 &lt;strong&gt;30&lt;/strong&gt;% 的内存占用。&lt;/p&gt;
&lt;p&gt;与此同时，我们对 HTTP/1.1 及 HTTP/2 的场景也进行了初步的性能测试，目前来看性能表现比较一般。这主要是由于目前 HTTP 协议族的 IO、Stream 都由三方库进行处理，与 MOSN 现有的处理框架整合度较差。我们会在后续迭代进行专项优化，提升 MOSN 处理 HTTP 协议族的表现。&lt;/p&gt;
&lt;p&gt;此外，针对大量链接场景（例如长连接网关），我们引入了 Raw Epoll + 协程池的模式来应对协程暴增的问题，从而大幅优化了该场景下的 QPS 和内存表现。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;h3 id=&#34;版本对比&#34;&gt;版本对比&lt;/h3&gt;
&lt;p&gt;对比条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面大小 0~10k，平均5k&lt;/li&gt;
&lt;li&gt;downstream 链接 1000&lt;/li&gt;
&lt;li&gt;upstream链接 6&lt;/li&gt;
&lt;li&gt;单核压测&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;版本&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;QPS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;内存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;10500&lt;/td&gt;
&lt;td&gt;175M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0.2.1&lt;/td&gt;
&lt;td&gt;13000&lt;/td&gt;
&lt;td&gt;122M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.4.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.4.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.4.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.4.0&#34;&gt;MOSN v1.4.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v140&#34;&gt;v1.4.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持记录 HTTP 健康检查日志 (#2096) @dengqian&lt;/li&gt;
&lt;li&gt;新增最小连接负载均衡器 (#2184) @dengqian&lt;/li&gt;
&lt;li&gt;新增 API: 强制断开并重新连接 ADS 服务 (#2183) @dengqian&lt;/li&gt;
&lt;li&gt;支持 pprof debug server 配置 endpoint (#2202) @dengqian&lt;/li&gt;
&lt;li&gt;集成 mosn.io/envoy-go-extension，参考&lt;a href=&#34;https://github.com/mosn/mosn/blob/master/examples/codes/envoy-go-extension/README_CN.md&#34;&gt;文档&lt;/a&gt; (#2200) @antJack (#2222) @3062&lt;/li&gt;
&lt;li&gt;新增 API: 支持覆盖注册 Variable (mosn/pkg#72) @antJack&lt;/li&gt;
&lt;li&gt;新增记录 mosn 处理时间的字段的变量 (#2235) @z2z23n0&lt;/li&gt;
&lt;li&gt;支持将 cluster idle_timeout 设置为零以表示从不超时 (#2197) @antJack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;import pprof 迁移至 pkg/mosn (#2216) @3062&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;减少 proxywasm 基准测试的日志记录 (#2189) @Crypt Keeper&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增大 UDP DNS 解析缓冲区 (#2201) @dengqian&lt;/li&gt;
&lt;li&gt;修复平滑升级时未继承 debug server 的问题 (#2204) @dengqian&lt;/li&gt;
&lt;li&gt;修复平滑升级失败时，新 mosn 会删除 reconfig.sock 的问题 (#2205) @dengqian&lt;/li&gt;
&lt;li&gt;修复 HTTP 健康检查 URL query string 未转译的问题 (#2207) @dengqian&lt;/li&gt;
&lt;li&gt;修复 ReqRoundRobin 负载均衡器在索引超过 host 数量时，host 选择失败的问题 (#2209) @dengqian&lt;/li&gt;
&lt;li&gt;修复 RDS 创建路由之后，已建连的连接无法找到路由的问题 (#2199) @dengqian (#2210) @3062&lt;/li&gt;
&lt;li&gt;修复 Variable.Set 执行后会读取到旧缓存值的问题 (mosn/pkg#73) @antJack&lt;/li&gt;
&lt;li&gt;修复 DefaultRoller 未设置时间导致 panic 的问题 (mosn/pkg#74) @dengqian&lt;/li&gt;
&lt;li&gt;提前 metrics 初始化时间使其适用于 static config (#2221) @dengqian&lt;/li&gt;
&lt;li&gt;修复多个 health checker 共用 rander 导致的并发问题 (#2228) @dengqian&lt;/li&gt;
&lt;li&gt;设置 HTTP/1.1 作为发往上游的 HTTP 协议 (#2225) @dengqian&lt;/li&gt;
&lt;li&gt;补全缺失的统计信息 (#2215) @3062&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.5.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.5.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.5.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.5.0&#34;&gt;MOSN v1.5.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v150&#34;&gt;v1.5.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EdfLoadBalancer 支持慢启动 (#2178) @jizhuozhi&lt;/li&gt;
&lt;li&gt;支持集群独占连接池 (#2281) @yejialiango&lt;/li&gt;
&lt;li&gt;LeastActiveRequest 和 LeastActiveConnection 负载均衡器支持设置 active_request_bias (#2286) @jizhuozhi&lt;/li&gt;
&lt;li&gt;支持配置指标采样器 (#2261) @jizhuozhi&lt;/li&gt;
&lt;li&gt;新增 PeakEWMA 负载均衡器 (#2253) @jizhuozhi&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变更&#34;&gt;变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;README 更新 partners &amp;amp; users (#2245) @doujiang24&lt;/li&gt;
&lt;li&gt;更新依赖 (#2242) (#2248) (#2249) @dependabot&lt;/li&gt;
&lt;li&gt;升级 MOSN 支持的最低 Go 版本至 1.18 (#2288) @muyuan0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用逻辑时钟使 edf 调度器更加稳定 (#2229) @jizhuozhi&lt;/li&gt;
&lt;li&gt;proxywasm 中缺少 proxy_on_delete 的日志级别从 error 更改为 warn (#2246) @codefromthecrypt&lt;/li&gt;
&lt;li&gt;修正 connection 对象接收者命名不同的问题 (#2262) @diannaowa&lt;/li&gt;
&lt;li&gt;禁用 workflow 中过于严格的 linters (#2259) @jizhuozhi&lt;/li&gt;
&lt;li&gt;当 PR 是未完成状态时不启用 workflow (#2269) @diannaowa&lt;/li&gt;
&lt;li&gt;使用指针减少 duffcopy 和 duffzero 开销 (#2272) @jizhuozhi&lt;/li&gt;
&lt;li&gt;删除不必要的导入 (#2292) @spacewander&lt;/li&gt;
&lt;li&gt;CI 增加 goimports 检测 (#2297) @spacewander&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复健康检查时多个 host 使用同一个 rander 引发的异常 (#2240) @dengqian&lt;/li&gt;
&lt;li&gt;修复连接池绑定连接标识错误 (#2263) @antJack&lt;/li&gt;
&lt;li&gt;修复在上下文中将 client stream 协议信息保存到 DownStreamProtocol 的错误 (#2270) @nejisama&lt;/li&gt;
&lt;li&gt;修复未使用正确的 Go 版本进行测试 (#2288) @muyuan0&lt;/li&gt;
&lt;li&gt;修复无法找到实际值为 &amp;lsquo;-&amp;rsquo; 的变量 (#2174) @3062&lt;/li&gt;
&lt;li&gt;修复 cluster 证书配置错误导致的空接口异常 (#2291) @3062&lt;/li&gt;
&lt;li&gt;修复 leastActiveRequestLoadBalancer 配置中使用了接口类型导致的解析错误 (#2284) @jizhuozhi&lt;/li&gt;
&lt;li&gt;修复配置文件 lbConfig 未生效的问题 (#2299) @3062&lt;/li&gt;
&lt;li&gt;修复 activeRequestBias 缺少默认值和一些命名大小写错误 (#2298) @jizhuozhi&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN v1.6.0 发布</title>
      <link>https://mosn.io/docs/products/report/releases/v1.6.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/products/report/releases/v1.6.0/</guid>
      <description>
        
        
        &lt;p&gt;我们很高兴的宣布 &lt;a href=&#34;https://github.com/mosn/mosn/releases/tag/v1.6.0&#34;&gt;MOSN v1.6.0&lt;/a&gt; 发布，以下是该版本的变更日志。&lt;/p&gt;
&lt;h2 id=&#34;v160&#34;&gt;v1.6.0&lt;/h2&gt;
&lt;h3 id=&#34;新功能&#34;&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PeakEWMA 支持配置 activeRequestBias (#2301) @jizhuozhi&lt;/li&gt;
&lt;li&gt;gRPC filter 支持 UDS (#2309) @wenxuwan&lt;/li&gt;
&lt;li&gt;支持初始化热升级时 config 继承函数 (#2241) @dengqian&lt;/li&gt;
&lt;li&gt;允许自定义 proxy defaultRouteHandlerName (#2308) @fibbery&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变更&#34;&gt;变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;示例 http-sample README 增加配置文件链接 (#2226) @mimani68&lt;/li&gt;
&lt;li&gt;将 wazero 更新到 1.2.1 (#2254) @codefromthecrypt&lt;/li&gt;
&lt;li&gt;更新依赖 (#2230) (#2233) (#2247) (#2302) (#2326) (#2332) (#2333) @dependabot&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重构调试日志内容，打印 data 移至 tracef 中 (#2316) @antJack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EWMA 优化新添加的主机的默认值 (#2301) @jizhuozhi&lt;/li&gt;
&lt;li&gt;PeakEwma LB 不再统计错误响应 (#2323) @jizhuozhi&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-修复&#34;&gt;Bug 修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复 edfScheduler 在动态负载算法中错误地将权重固定为1 (#2306) @jizhuozhi&lt;/li&gt;
&lt;li&gt;修复 cluster hosts 顺序改变导致的 LB 行为不稳定 (#2258) @dengqian&lt;/li&gt;
&lt;li&gt;修复 NilMetrics 缺少 EWMA() 方法导致的 panic (#2310) @antJack (#2312) @jizhuozhi&lt;/li&gt;
&lt;li&gt;修复 xDS 更新时，cluster hosts 为空导致的 panic (#2314) @dengqian&lt;/li&gt;
&lt;li&gt;修复 MOSN 异常退出时 UDS 套接字文件未删除导致重启失败 (#2318) @wenxuwan&lt;/li&gt;
&lt;li&gt;修复 xDS 状态码未转换错误。修复未处理 istio inbound IPv6 地址错误 (#2144) @kkrrsq&lt;/li&gt;
&lt;li&gt;修复非热升级优雅退出时 Listener 未直接关闭导致新建连接报错 (#2234) @hui-cha&lt;/li&gt;
&lt;li&gt;修复 goimports lint 错误 (#2313) @spacewander&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 教程</title>
      <link>https://mosn.io/docs/user-guide/start/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mosn.io/docs/user-guide/start/tutorial/</guid>
      <description>
        
        
        &lt;p&gt;MOSN 教程使用 KataCoda 作为线上环境，无需自己部署环境，提供交互式的学习体验，请访问 &lt;a href=&#34;https://www.katacoda.com/mosn/courses/istio&#34;&gt;KataCoda 上的 MOSN 教程&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;教程列表&#34;&gt;教程列表&lt;/h2&gt;
&lt;p&gt;当前支持的教程如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://katacoda.com/mosn/courses/istio/mosn-with-istio&#34;&gt;在 Istio 中集成 MOSN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/mosn/courses/istio/istio-mosn-adapt-dubbo&#34;&gt;使用 MOSN 在 Istio 环境中运行 Dubbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/mosn/courses/istio/mosn-with-skywalking&#34;&gt;在 MOSN 中集成 SkyWalking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贡献教程&#34;&gt;贡献教程&lt;/h2&gt;
&lt;p&gt;MOSN 教程源码位于 &lt;a href=&#34;https://github.com/mosn/mosn-tutorial&#34;&gt;mosn/mosn-tutorial&lt;/a&gt; 仓库中，参与贡献请阅读&lt;a href=&#34;https://github.com/mosn/mosn-tutorial/blob/master/contributing_zh.md&#34;&gt;贡献书册&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
