[{"body":" 当前只提供中文版文档。The English documentation is under construction.\n MOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.\nCore competence  Integrated with Istio  Integrated with Istio 1.0 and V4 APIs to run based on full dynamic resource configuration  Core forwarding  Self-contained Web server Support TCP proxy Support TProxy mode  Multi-protocol  Support HTTP/1.1 and HTTP/2 Support SOFARPC Support Dubbo protocol (under development)  Core routing  Support Virtual Host routing Support Headers/URL/Prefix routing Support Host Metadata-based Subset routing Support retry  Backend Management and load balancing  Support connection pool Support throttling Support active backend health check Support load balancing strategies, such as Random and RR Support Host Metadata-based Subset load balancing strategy  Observability  Observe network data Observing protocol data  TLS  Support HTTP/1.1 on TLS Support HTTP/2.0 on TLS Support SOFARPC on TLS  Process management + Support smooth reload + Support smooth upgrade Extension capability + Support custom private protocols + Support adding custom extensions in protocol at the TCP IO layer  ","excerpt":"当前只提供中文版文档。The English documentation is under construction.\n MOSN is a network proxy written in …","ref":"https://mosn.io/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"https://mosn.io/blog/releases/","title":"Release"},{"body":" Why use MOSN instead of Istio\u0026rsquo;s default data plane? Before the Service Mesh transformation, we have expected that as the next generation of Ant Financial\u0026rsquo;s infrastructure, Meshization will inevitably bring revolutionary changes and evolution costs. We have a very ambitious blueprint: ready to integrate the original network and middleware various capabilities have been re-precipitated and polished to create a low-level platform for the next-generation architecture of the future, which will carry the responsibility of various service communications.\nThis is a long-term planning project that takes many years to build and meets the needs of the next five or even ten years. The team will cooperate to build a cross-business, SRE, middleware, infrastructure and other departments. We must have a network proxy forwarding plane with flexible expansion, high performance, and long-term evolution. Nginx and Envoy are unsatisfactory in terms of R \u0026amp; D efficiency and flexible expansion. At the same time, the entire Mesh transformation involves a large number of departments and R \u0026amp; D personnel. The landing costs of cross-team cooperation must be considered. Therefore, we based our own research on Golang. New network proxy MOSN in cloud native scenario. For the performance of Golang, we also did a full investigation and test in the early stage to meet the performance requirements of Ant Financial Services.\nWhat is the difference between MOSN and Envoy? What are the advantages of MOSN? Differences in language stacks\nMOSN is written in Go. Go has strong guarantees in terms of production efficiency and memory security. At the same time, Go has an extensive library ecosystem in the cloud-native era. The performance is acceptable and usable in the Service Mesh scenario. Therefore, MOSN has a lower intellectual cost for companies and individuals using languages such as Go and Java.\nDifferentiation of core competence\n MOSN supports a multi-protocol framework, and users can easily access private protocols with a unified routing framework; Multi-process plug-in mechanism, which can easily extend the plug-ins of independent MOSN processes through the plug-in framework, and do some other management, bypass and other functional module extensions; Transport layer national secret algorithm support with Chinese encryption compliance;  Is the open source MOSN the same version as the MOSN used internally by Ant Financial? First of all, there is no so-called independent MOSN version inside Ant Financial. Ant Financial has many modules developed based on MOSN, and the internal modules rely on the open source version of MOSN. The research and development of business-independent MOSN core capabilities are carried out directly on the open source version.\nWhat is the difference between the open source and commercial versions of MOSN? Ant Financial has commercial Mesh products. Commercial products mainly provide a complete solution from development to delivery runtime. At the same time, in order to meet the business needs of enterprise users, MOSN will be extended, so the so-called MOSN commercial version It mainly carries the version of the business user\u0026rsquo;s own business module.\nWhat is MOSN\u0026rsquo;s open source plan? The release cycle of MOSN open source is one month. We are about to announce Roadmap for 2020, and we look forward to co-building with more enterprises.\nWhat version of Istio does MOSN support? When will it be available in Istio? Currently, MOSN can be based on Istio 1.1.4 and run through the bookinfo example. Due to the latest version of Istio that has upgraded the XDS protocol and some enhancements, MOSN is currently adapting. It is expected that in October 2020, it will fully support HTTP of high-level Istio. Department ability.\nWill MOSN contribute to an Open Source Foundation? Currently, MOSN has no clear plans to contribute to the foundation.\nWhat service registration and discovery mechanisms does MOSN support? MOSN mainly supports two service registration and discovery mechanisms: one is to directly adapt to Istio, and the other is to integrate the SDK and use it with different registration centers and configuration centers.\nHow does MOSN compare to Envoy? Because Envoy is based on HTTP testing, currently MOSN does not have a large optimization for HTTP, so we expect that a benchmark will be released after this year\u0026rsquo;s optimization.\nHow to participate in the MOSN open source community? Join the MOSN slack worksapce: https://mosnproxy.slack.com to participate in the open source community. You can also visit the Community repository to learn about the organizational structure of the MOSN open source community and to obtain community materials.\n","excerpt":"Why use MOSN instead of Istio\u0026rsquo;s default data plane? Before the Service Mesh transformation, we …","ref":"https://mosn.io/docs/faq/","title":"FAQ"},{"body":" We are happy to announce the release of MOSN v0.10.0. You can see the changelog below.\nNew features  Support multi-process plugin mode (#979, @taoyuanyuan) Startup parameters support service-meta parameters (#952, @trainyao) Supports abstract UDS mode to mount SDS socket  Refactoring  Separate some MOSN base library code into mosn.io/pkg package Separate MOSN interface definition to mosn.io/api package  Optimization  The log basic module is separated into mosn.io/pkg, and the log of MOSN is optimized Optimize FeatureGate (#927, @nejisama) Added processing when failed to get SDS configuration When CDS deletes a cluster dynamically, it will stop the health check corresponding to the cluster The callback function when SDS triggers certificate update adds certificate configuration as a parameter  Bug fixes  Fixed a memory leak issue when SOFARPC Oneway request failed Fixed the issue of 502 error when receiving non-standard HTTP response Fixed possible conflicts during DUMP configuration Fixed the error of Request and Response Size of TraceLog statistics Fixed write timeout failure due to concurrent write connections Fixed serialize bug Fixed the problem that the memory reuse buffer is too large when the connection is read, causing the memory consumption to be too high Optimize Dubbo related implementation in XProtocol  ","excerpt":"We are happy to announce the release of MOSN v0.10.0. You can see the changelog below.\nNew features …","ref":"https://mosn.io/blog/releases/v0.10.0/","title":"Announcing MOSN v0.10.0"},{"body":"","excerpt":"","ref":"https://mosn.io/index.json","title":""},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_77381_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_77381_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About MOSN MOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.        Open sourced by Ant Financial with 100k+ containers production-grade application.    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://mosn.io/about/","title":"About MOSN"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will …","ref":"https://mosn.io/blog/","title":"MOSN blog"},{"body":"  #td-cover-block-0 { background-image: url(/community/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_100822_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/community/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_100822_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  Join the MOSN community MOSN is an open source project that anyone in the community can use, improve, and enjoy. It was open-sourced by Ant Financial on July, 2018. We'd love you to join us! Here's a few ways to find out what's happening and get involved.        For more materials about MOSN community, please go to the community repo.     Communicate with MOSN developers on Slack workspace.    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://mosn.io/community/","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu680f3b5972eee538dc28399e899a5c9b_143745_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu680f3b5972eee538dc28399e899a5c9b_143745_1920x1080_fill_q75_catmullrom_top.jpg); } }  Modular Open Smart Network proxy Learn More   Download   An Open Source Cloud Native Proxy for Edge and Service Mesh\n          MOSN can be integrated with any Service Mesh which support xDS API. It also can be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.       Any questions? Features request, ask questions or report bugs? Feel free to file a issue or join our slack workspace.\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n   Follow us on Twitter! For announcement of latest features etc on @MosnProxy.\n     This is the second Section     -- ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://mosn.io/","title":"MOSN"},{"body":"","excerpt":"","ref":"https://mosn.io/search/","title":"Search Results"}]